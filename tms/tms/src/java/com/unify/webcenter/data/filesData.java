//   Generated by FlechaRoja Tech Tools (2003) 

package com.unify.webcenter.data;

import com.unify.webcenter.conf.TMSConfigurator;
import com.unify.webcenter.tools.*;
import com.unify.webcenter.broker.*;
import com.unify.webcenter.data.*;

/**
* Class that represent the table files
* @author Administrator
*/
public class filesData extends mainData implements Comparable{
	 protected String name;
	 protected int id;
	 protected int owner;
	 protected int task;
	 protected java.sql.Timestamp date;
	 protected int status;
	 protected String comments;
	 protected String published;
	 protected int project;
         protected int topic;
	 protected String type;
	 protected java.sql.Timestamp upload;
	 protected java.math.BigDecimal size;
         private String taskName;
    private String topicName;
private int id_account;
        private String to_replicate;

	 public void setname(String val) { name = val; } 
	 public void setid(int val) { id = val; } 
	 public void setowner(int val) { owner = val; } 
	 public void settask(int val) { task = val; } 
	 public void setdate(java.sql.Timestamp val) { date = val; } 
	 public void setstatus(int val) { status = val; } 
	 public void setcomments(String val) { comments = val; } 
	 public void setpublished(String val) { published = val; } 
	 public void setproject(int val) { project = val; } 
         public void settopic(int val) { topic = val; } 
	 public void settype(String val) { type = val; } 
	 public void setupload(java.sql.Timestamp val) { upload = val; } 
	 public void setsize(java.math.BigDecimal val) { size = val; } 

	 public String getname() { return name; }
	 public int getid() { return id; }
	 public int getowner() { return owner; }
	 public int gettask() { return task; }
	 public java.sql.Timestamp getdate() { return date; }
	 public int getstatus() { return status; }
	 public String getcomments() { return comments; }
	 public String getpublished() { return published; }
	 public int getproject() { return project; }
         public int gettopic() { return topic; } 
	 public String gettype() { return type; }
	 public java.sql.Timestamp getupload() { return upload;}
	 public java.math.BigDecimal getsize() { return size;}

         
         public filesData() {
             
         }
         
         public filesData(filesData val) {             
             this.name = val.getname();
             this.id = 0;
             this.owner = val.getowner();
             this.task = val.gettask();
             this.date = val.getdate();
             this.status = val.getstatus();
             this.comments = val.getcomments();
             this.published = val.getpublished();
             this.project = val.getproject();
             this.topic = val.gettopic();
             this.type = val.gettype();
             this.upload = val.getupload();
             this.size = val.getsize();  
         }

         
         public String getPrefixType() {
            String prefix;
            
            if (type.equalsIgnoreCase("application/msword")) prefix = "doc";
            //else if (type.equalsIgnoreCase("")) prefix = "mdb";
            else if (type.equalsIgnoreCase("application/vnd.ms-powerpoint")) prefix = "ppt"; 
            else if (type.equalsIgnoreCase("application/vnd.ms-excel")) prefix = "xls"; 
            else if (type.equalsIgnoreCase("application/pdf")) prefix = "pdf"; 
            else if (type.equalsIgnoreCase("application/postscript")) prefix = "ai"; 
            //else if (type.equalsIgnoreCase("")) prefix = "eps";
            //else if (type.equalsIgnoreCase("")) prefix = "ttf";
            else if (type.equalsIgnoreCase("image/gif")) prefix = "gif";
            else if (type.equalsIgnoreCase("image/jpeg")) prefix = "jpg";
            else if (type.equalsIgnoreCase("image/pjpeg")) prefix = "jpg";
            else if (type.equalsIgnoreCase("image/png")) prefix = "png";
            //else if (type.equalsIgnoreCase("")) prefix = "psd";
            else if (type.equalsIgnoreCase("text/plain")) prefix = "txt";
            else if (type.equalsIgnoreCase("application/x-javascript")) prefix = "js"; 
            else if (type.equalsIgnoreCase("text/html")) prefix = "html";
            else if (type.equalsIgnoreCase("application/x-httpd-php")) prefix = "php";
            else if (type.equalsIgnoreCase("application/zip")) prefix = "zip";
            //else if (type.equalsIgnoreCase("")) prefix = "rar";
            else prefix = "default";

            return prefix;
            
        }
 
        public String getPath() {
            String relpath = "";            
            String separator = java.io.File.separator;

            // Get the URL to the upload dir        
            String subdir = TMSConfigurator.getDownloadPath();
            // Si el string no termina con el separador de files, se agrgega
            if (!subdir.endsWith(separator)) subdir = subdir + separator;

            // delete each file entry in DB and your file asociated.
            String fileName = "";

            fileName = getid()+"-"+getname();                            
            // Removemos cualquier caracter invalido
            fileName = StringManipulator.generateValidFilename(fileName);
            
            if (getproject() > 0 ) {
                subdir = subdir+"PR"+getproject()+separator;
                if (gettask() > 0 ) subdir = subdir+"TK"+gettask()+separator;
                if (gettopic() > 0 ) subdir = subdir+"TP"+gettopic()+separator;
            }

            // make path
            relpath = subdir+fileName;

            return relpath;
        }         

	 public String toString() {
		 return" name:" + name +  " comments:" + comments +  " type:" + type ; 
	 }
         
         // Regresa la fecha de entrega formateada de forma apropiada.
         public String getFormatedUploadDate() { 
             try {
             java.text.DateFormat df = java.text.DateFormat.
                    getDateInstance(java.text.DateFormat.MEDIUM);
             return df.format(upload);
             } catch (Exception e) {
                 return "";
             }
             
         }         
         
      /**
       * Metodo que regresa el nombre de la tarea ligada a este archivo, si es que aplica
       */
      public String getTaskName(int idAccount) {
          String value = "";
          try {
              if (task > 0) {
                  tasksBroker tBroker = new tasksBroker();
                  tasksData data = (tasksData) tBroker.getData(task,idAccount);
                  value = data.getname();
                  tBroker.close();
              }
          }
              catch (Exception e) {
                  
              }
            return value;
      }
      
      
         
    //Metodo de comparacion para efectos de hacer un ordenamiento por nombre default
    public int compareTo(Object obj) {
        String txt = this.date +"-"+ this.name.toUpperCase()  ;
        String txt2 =  ((filesData) obj).getdate() + "-" + ((filesData) obj).getname().toUpperCase();

        return txt.compareTo(txt2);
    }

    public int getId_account() {
        return id_account;
    }

    public void setId_account(int id_account) {
        this.id_account = id_account;
    }

    /**
     * @return the taskName
     */
    public String getTaskName() {
        return taskName;
    }

    /**
     * @param taskName the taskName to set
     */
    public void setTaskName(String taskName) {
        this.taskName = taskName;
    }

    /**
     * @return the topicName
     */
    public String getTopicName() {
        return topicName;
    }

    /**
     * @param topicName the topicName to set
     */
    public void setTopicName(String topicName) {
        this.topicName = topicName;
    }

    public String getTo_replicate() {
        return to_replicate;
    }

    public void setTo_replicate(String to_replicate) {
        this.to_replicate = to_replicate;
    }
    
}