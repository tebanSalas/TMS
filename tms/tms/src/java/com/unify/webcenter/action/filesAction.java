/*
 * Generated by Flecha Roja Technologies Auto Generator
 *
 * Created on January 9, 2003, 11:31 AM
 */
package com.unify.webcenter.action;

import java.io.InputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.util.logging.*;
import com.unify.webcenter.tools.*;

import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

import org.apache.struts.action.*;
import org.apache.commons.beanutils.*;

import com.unify.webcenter.data.*;
import com.unify.webcenter.broker.*;
import com.unify.webcenter.form.*;
import com.unify.webcenter.conf.TMSConfigurator;
import com.unify.webcenter.desencrypter.DesEncrypter;
import com.unify.webcenter.desencrypter.StringEncrypter;
import java.io.FileInputStream;
import java.sql.Timestamp;
import org.apache.struts.upload.FormFile;

/**
 * <p>This action works with both JSP and Velocity templates.
 * The type of template to be used is defined in the Struts configuration
 * file.</p>
 *
 * <p>The action support an <i>action</i> URL parameter. This URL parameter
 * controls what this action class does. The following values are supported:</p>
 * <ul>
 *   <li>save    Save the record
 *   <li>delete	 Delete the record
 *   <li>edit    Edit the record
 *   <li>show	 Show the record
 * </ul>
 *
 *
 * @author Administrator 
 */
public class filesAction extends Action {

    private static Logger logger = Logger.getLogger("com.unify");

    /** Creates a new instance of calendarAction */
    public filesAction() {

    }

    /**
     * Handle server requests.
     *
     * @param mapping The ActionMapping used to select this instance
     * @param actionForm The optional ActionForm bean for this request (if any)
     * @param request The HTTP request we are processing
     * @param response The HTTP response we are creating
     *
     * @exception IOException if an input/output error occurs
     * @exception ServletException if a servlet exception occurs
     */
    public ActionForward execute(ActionMapping mapping,
            ActionForm form,
            HttpServletRequest request,
            HttpServletResponse response)
            throws IOException, ServletException {
        String action;
        HttpSession session;
        String patternStr = ",";
        String separator = File.separator;
        filesBroker broker;
        membersBroker memBroker;
        accountsBroker brokerAccount;
              teamsBroker team;
        String company = null;

        session = request.getSession(false);

        // Si la sesion es nula, se debe redireccionar al login.
        if (session == null || session.getAttribute("login") == null) {
            // forward to display the home page
            return (mapping.findForward("login"));

        } else {
            broker = new filesBroker();
            memBroker = new membersBroker();
            brokerAccount = new accountsBroker();
             team = new teamsBroker();
            try {
                session = request.getSession();

                loginData user = (loginData) session.getAttribute("login");
                TMSConfigurator tms= new TMSConfigurator(user);
                // Get the URL to the upload dir        
                String sub = tms.getDownloadPath();
                company = tms.getCompany(user);
                // Si el string no termina con el separador de files, se agrgega
                if (!sub.endsWith(separator)) {
                    sub = sub + separator;
                }
                if (form == null) {
                    System.out.println(" Creating new filesForm bean under key " + mapping.getAttribute());
                    form = new filesForm();
                }

                filesForm thisForm = (filesForm) form;

                // fetch action from form
                action = ((filesForm) form).getOperation();

                    System.out.println("ACCION: "+action);
                servlet.log("[DEBUG] filesAction at perform(): Action is " + action);

                // Se agrega al contexto la informacion del usuario
                request.setAttribute("userInfo", user);
                request.setAttribute("donwloadPath",sub);

                // Determine what to do
                if (action.equals("add") || action.equals("update")) {
                    // En el caso de la operacion add, se despliega el formulario.                    
                    String titulo = "";
                    if (action.equals("add")) {
                        thisForm.setOperation("applyAdd");
                        thisForm.setid(0);

                        titulo = java.util.ResourceBundle.getBundle("ApplicationResources",
                                new Locale(user.getlanguage(), "")).getString("common.addLabel");
                    } else {
                        // Se trata de un update sobre un archivo ya existente.
                        thisForm.setOperation("applyUpdate");
                        thisForm.setid(thisForm.getid());
                        titulo = java.util.ResourceBundle.getBundle("ApplicationResources",
                                new Locale(user.getlanguage(), "")).getString("common.updateLabel");
                    }
                    // Se pone el titulo correspondiente.
                    request.setAttribute("title", titulo);

                        System.out.println("1TASK : " +  request.getParameter("tasks"));
                        System.out.println("1TASK FORM : " +  thisForm.gettask() + "/"  );
                        
                        System.out.println("1TICK : " +  request.getParameter("task"));
                        System.out.println("1TICK FORM : " +  thisForm.gettopic()+ "/"  );
                    if (thisForm.getfromPage().equals("viewProject")) {
                        projectsBroker projBroker = new projectsBroker();
                        projectsData projectMember = (projectsData) projBroker.getData(thisForm.getproject(), user.getId_account());
                        projBroker.close();
                        // Se agrega el link para el menu con la ruta
                        request.setAttribute("menuRoute",
                                "<a href='./home.do'>" +
                                java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("header.displayStart") + "</a>&nbsp;/" +
                                "<a href='./projects.do?operation=view&id=" +
                                projectMember.getid() + "'>" +
                                projectMember.getname() + "</a>&nbsp;/" +
                                titulo);
                    } else {
                        tasksBroker taskBroker = new tasksBroker();
                        tasksData dataTask = (tasksData) taskBroker.getData(thisForm.gettask(), user.getId_account());
                        taskBroker.close();
                        // Se agrega el link para el menu con la ruta
                        request.setAttribute("menuRoute",
                                "<a href='./home.do'>" +
                                java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("header.displayStart") + "</a>&nbsp;/" +
                                "<a href='./tasks.do?operation=view&id=" +
                                dataTask.getid() + "'>" +
                                dataTask.getname() + "</a>&nbsp;/" +
                                titulo);
                    }
                    
                    request.setAttribute("topics", request.getParameter("topics"));
                    request.setAttribute("company", company);
                    return (mapping.findForward("displayAddForm"));

                } else if (action.equals("edit")) {
                    // Si se trata de un edit, se debe de cargar los datos del bean
                    // en el formulario.
                    filesData data = (filesData) broker.getData(thisForm.getid(), user.getId_account());

                    // Tambien se debe traer el dato del owner.
                    membersData memData = (membersData) memBroker.getData(data.getowner(), user.getId_account());
                    request.setAttribute("owner", memData);

                    if (thisForm.getfromPage().equals("viewProject")) {
                        projectsBroker projBroker = new projectsBroker();
                        projectsData projectMember = (projectsData) projBroker.getData(thisForm.getproject(), user.getId_account());
                        projBroker.close();
                        // Se agrega el link para el menu con la ruta
                        request.setAttribute("menuRoute",
                                "<a href='./home.do'>" +
                                java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("header.displayStart") + "</a>&nbsp;/" +
                                "<a href='./projects.do?operation=view&id=" +
                                projectMember.getid() + "'>" +
                                projectMember.getname() + "</a>&nbsp;/" +
                                java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("common.addFiles"));
                    } else {
                        tasksBroker taskBroker = new tasksBroker();
                        tasksData dataTask = (tasksData) taskBroker.getData(thisForm.gettask(), user.getId_account());
                        taskBroker.close();
                        // Se agrega el link para el menu con la ruta
                        request.setAttribute("menuRoute",
                                "<a href='./home.do'>" +
                                java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("header.displayStart") + "</a>&nbsp;/" +
                                "<a href='./tasks.do?operation=view&id=" +
                                dataTask.getid() + "'>" +
                                dataTask.getname() + "</a>&nbsp;/" +
                                java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("common.addFiles"));

                    }
                    
                    request.setAttribute("topics", request.getParameter("topics"));

                    // We copy all the properties from the form to the bean.
                    PropertyUtils.copyProperties(thisForm, data);
                    request.setAttribute("company", company);
                    thisForm.setOperation("applyEdit");
                    return (mapping.findForward("displayEditForm"));

                } else if (action.equals("view")) {
                    // Si se trata de un view, se debe de cargar los datos del bean
                    // en el formulario.
                    filesData data = (filesData) broker.getData(thisForm.getid(), user.getId_account());
                    data.setdate(Timestamp.valueOf(data.convTimeZone(data.getdate(), user.getTime_zone())));
                    // Tambien se debe traer el dato del owner.
                    membersData memData = (membersData) memBroker.getData(data.getowner(), user.getId_account());
                    request.setAttribute("owner",  memData);
                    request.setAttribute("userId", request.getParameter("userId"));
                    request.setAttribute("assignedId", request.getParameter("assignedId"));
                    request.setAttribute("sss", request.getParameter("proyOwner"));
                    request.setAttribute("userProfile", request.getParameter("userProfile"));
                  
                    // We copy all the properties from the form to the bean.
                    PropertyUtils.copyProperties(thisForm, data);
                    thisForm.setOperation("view");


                    if (thisForm.getfromPage().equals("viewProject")) {
                        projectsBroker projBroker = new projectsBroker();
                        projectsData projectMember = (projectsData) projBroker.getData(thisForm.getproject(), user.getId_account());
                        projBroker.close();
                        // Se agrega el link para el menu con la ruta
                        request.setAttribute("menuRoute",
                                "<a href='./home.do'>" +
                                java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("header.displayStart") + "</a>&nbsp;/" +
                                "<a href='./projects.do?operation=view&id=" +
                                projectMember.getid() + "'>" +
                                projectMember.getname() + "</a>&nbsp;/" +
                                java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("common.addFiles"));
                    } else {
                        tasksBroker taskBroker = new tasksBroker();
                        tasksData dataTask = (tasksData) taskBroker.getData(thisForm.gettask(), user.getId_account());
                        taskBroker.close();
                        // Se agrega el link para el menu con la ruta
                        request.setAttribute("menuRoute",
                                "<a href='./home.do'>" +
                                java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("header.displayStart") + "</a>&nbsp;/" +
                                "<a href='./tasks.do?operation=view&id=" +
                                dataTask.getid() + "'>" +
                                dataTask.getname() + "</a>&nbsp;/" +
                                java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("common.addFiles"));

                    }

                    request.setAttribute("company", company);
                       //Aca es donde verifica si el usuario que esta accesando pertenece al equipo de trabajo
                    if (!user.isAdmin()) {
                     
                        if (team.isMember(data.getproject(), user.getid(), user.getId_account())) {
                            
                            return (mapping.findForward("displayViewForm"));

                        } else {
                            // No hay acceso, se redirecciona a una pagina donde se le notifica
                            // de eso.
                            // Se agrega el link para el menu con la ruta
                            return (mapping.findForward("accessDenied"));
                        }
                       
                        
                    } else {
                        return (mapping.findForward("displayViewForm"));
                    }


                } else if (action.equals("delete")) {
                    
                    
                    request.setAttribute("topics", request.getAttribute("topics"));
                    
                    // Tomamos el bean correspondiente a este objeto a fin
                    // de proceder con su borrado

                    // get the string with ids separate by "," character, and split in array os strings
                    String[] fields = (request.getParameter("checkedItems") + ",").split(patternStr);
                    ArrayList items = broker.getItems(fields, user.getId_account());

                    String param = "";
                    if (request.getParameter("fromPage").equalsIgnoreCase("viewProject")) {
                        param = request.getParameter("project");
                    } else if (request.getParameter("fromPage").equalsIgnoreCase("viewTask")) {
                        param = request.getParameter("task");
                    }

                    request.setAttribute("topics", request.getParameter("topics"));
                    request.setAttribute("fromPage", request.getParameter("fromPage"));
                    request.setAttribute("param", "" + param);
                    request.setAttribute("checkedItems", request.getParameter("checkedItems"));
                    request.setAttribute("items", items);
                    request.setAttribute("title", "Files");
                    request.setAttribute("do", request.getRequestURI());
                    // We delete the object in the DBMS
                    //broker.delete(data);
                    request.setAttribute("company", company);
                    // forward to display the list
                    return (mapping.findForward("confirmDelete"));


                } else if (action.equals("applyDelete")) {

                    System.out.println("PRT2");
                    // get the string with ids separate by "," character, and split in array os strings
                    String[] fields = (request.getParameter("checkedItems") + ",").split(patternStr);
                    String lista = "";
                    for (int i = 0; i < fields.length; i++) {
                        lista += fields[i] + " - ";
                    }
                    ArrayList items = broker.getItems(fields, user.getId_account());

                    String fullpath = "";
                    String subdir = "";
                    File theFile;

                    // delete each file entry in DB and your file asociated.
                    String fileName = "";
                    filesData datatemp = new filesData();

                    ListIterator li = items.listIterator();
                    int id= 0;
                    while (li.hasNext()) {
                        
                        datatemp = new filesData();
                        datatemp = (filesData) li.next();
                        
                        id= datatemp.gettopic();
                        subdir = sub;
                        fileName = datatemp.getid() + "-" + datatemp.getname();
                        if (datatemp.getproject() > 0) {
                            subdir = subdir + "PR" + datatemp.getproject() + separator;
                            if (datatemp.gettask() > 0) {
                                subdir = subdir + "TK" + datatemp.gettask() + separator;
                            }
                            if (datatemp.gettopic() > 0) {
                                subdir = subdir + "TP" + datatemp.gettopic() + separator;
                            }
                        }

                        // delete the file
                        fullpath = subdir + fileName;
                        theFile = new File(fullpath);

                        // If the file was deleted, then delete the entry in DB 
                        theFile.delete();
                        broker.delete(datatemp);
                    }
                    request.setAttribute("company", company);
                    // return to the page that list the files...
                    
                    
                        if  ( !request.getParameter("topics").equals("addFile") ){
                            return (new ActionForward(mapping.findForward(request.getParameter("fromPage")).getPath() + "&id=" + request.getParameter("param"), false));
                        }else{
                             
                            return (new ActionForward(mapping.findForward("viewTopic").getPath() + "&id=" + id, true));
                        }
                } else if (action.equals("applyAdd")) {

                    // Se trata de la aplicacion de un insert en la BD
                    filesData data = new filesData();

                    //retrieve the text data
                    String text = thisForm.getcomments();

                    //retrieve the file representation
                    FormFile file = thisForm.getTheFile();

                    //retrieve the file name
                    String fileName = file.getFileName();
                    // Removemos cualquier caracter invalido
                    fileName = StringManipulator.generateValidFilename(fileName);

                    //retrieve the content type
                    String contentType = file.getContentType();

                    // Retrieve the project id and task (if task exists)
                    int projectid = thisForm.getproject();
                    int taskid = thisForm.gettask();
                    int topicid = thisForm.gettopic();
                    
                    //retrieve the file size
                    int size = (file.getFileSize());

                    String dataf = null;

                    try {
                        //retrieve the file data
                        ByteArrayOutputStream baos = new ByteArrayOutputStream();
                        InputStream stream = file.getInputStream();

                        System.out.println("TASK : " +  request.getParameter("tasks"));
                        System.out.println("TASK FORM : " +  taskid + "/"  );
                        
                        System.out.println("TICK : " +  request.getParameter("task"));
                        System.out.println("TICK FORM : " +  topicid + "/"  );
                        
                                       
                        String subdir = sub;
                        if ( !request.getParameter("topics").equals("addFile") ){

                        // Save the information about the file in DB   
                            
                        data.setid(0);
                        data.setcomments(thisForm.getcomments());
                        data.setdate(new java.sql.Timestamp(Calendar.getInstance().getTimeInMillis()));
                        data.settype(file.getContentType());
                        data.setname(fileName);
                        data.setowner(user.getid());
                        data.setproject(thisForm.getproject());
                        data.setpublished("0");
                        data.setsize(new java.math.BigDecimal(file.getFileSize()));
                        data.setstatus(0);
                        data.settopic(0);
                        data.settask(thisForm.gettask());
                        data.setupload(new java.sql.Timestamp(Calendar.getInstance().getTimeInMillis()));
                        data.setId_account(user.getId_account());
                        broker.add(data);
                        
                                                // Save the file
                        fileName = data.getid() + "-" + fileName;
                        //fileName = ""+data.getid();             
                        if (projectid > 0) {
                            subdir = subdir + "PR" + projectid + separator;
                            if (taskid > 0) {
                                subdir = subdir + "TK" + taskid + separator;
                            }
                        }
                        
                        }else{
                            // Save the information about the file in DB                            
                        data.setid(0);
                        data.setcomments(thisForm.getcomments());
                        data.setdate(new java.sql.Timestamp(Calendar.getInstance().getTimeInMillis()));
                        data.settype(file.getContentType());
                        data.setname(fileName);
                        data.setowner(user.getid());
                        data.setproject(thisForm.getproject());
                        data.setpublished("0");
                        data.setsize(new java.math.BigDecimal(file.getFileSize()));
                        data.setstatus(0);
                        data.settask(0);
                        data.settopic(taskid);
                        data.setId_account(user.getId_account());
                        data.setupload(new java.sql.Timestamp(Calendar.getInstance().getTimeInMillis()));
                        broker.add(data);
                        
                                                // Save the file
                        fileName = data.getid() + "-" + fileName;
                        //fileName = ""+data.getid();             
                        if (projectid > 0) {
                            subdir = subdir + "PR" + projectid + separator;
                            if (taskid > 0) {
                                subdir = subdir + "TP" + taskid + separator;
                            }
                        }
                        }


                        String fullpath = subdir + fileName;

                        File theFile = new File(fullpath);

                        // Create directory for the file, if requested.
                        if (theFile.getParentFile() != null) {
                            theFile.getParentFile().mkdirs();
                        }

                            System.out.println("AS2");

                        //write the file to the file specified
                        OutputStream bos = new FileOutputStream(theFile);
                        int bytesRead = 0;
                        byte[] buffer = new byte[8192];
                        while ((bytesRead = stream.read(buffer, 0, 8192)) != -1) {
                            bos.write(buffer, 0, bytesRead);
                        }
                        bos.close();

                            System.out.println("AS3");
                        //close the stream
                        stream.close();
                         servlet.log("[DEBUG] filesAction at perform(): ENC is " + TMSConfigurator.getEnc());
                        if (TMSConfigurator.getEnc()!=null && TMSConfigurator.getEnc().equalsIgnoreCase("Y")) {
                            String passPhrase = TMSConfigurator.getPassPhrase();
                            StringEncrypter desEncrypter = new StringEncrypter(passPhrase);


                            accountsData account = (accountsData) brokerAccount.getData(user.getId_account());


                            System.out.println("AS4");
                            String desDecrypted = desEncrypter.decrypt(account.getKey_encriptation());
                            // Create encrypter/decrypter class
                            DesEncrypter encrypter = new DesEncrypter(desDecrypted);

                            String temp = fullpath.replace('.', '-');
                            String[] split = fullpath.split("-");
                            String fullpath2 = subdir + "temp" + split[1].toString();
                            theFile = new File(fullpath);
                            File theFile2 = new File(fullpath2);
                            // Encrypt
                            encrypter.encrypt(new FileInputStream(theFile),
                                    new FileOutputStream(theFile2));
                            //write the file to the file specified
                            bos = new FileOutputStream(theFile);
                            InputStream stream2 = new FileInputStream(theFile2);
                            bytesRead = 0;
                            buffer = new byte[8192];
                            while ((bytesRead = stream2.read(buffer, 0, 8192)) != -1) {
                                bos.write(buffer, 0, bytesRead);
                            }
                            bos.close();
                            stream2.close();
                            theFile2.delete();
                        }

                    } catch (FileNotFoundException fnfe) {
                        System.out.println("Error en fileAction: " + fnfe.toString());
                        logger.logp(Level.SEVERE, "files.do", "perform",
                                "Fatal Error: " + fnfe.toString());

                        // Se borra el registro de la base de datos por consistencia
                        broker.delete(data);

                        broker.close();
                        memBroker.close();
                        return null;
                    } catch (IOException ioe) {
                        System.out.println("Error en fileAction: " + ioe.toString());
                        logger.logp(Level.SEVERE, "files.do", "perform",
                                "Fatal Error: " + ioe.toString());

                        // Se borra el registro de la base de datos por consistencia
                        broker.delete(data);

                        broker.close();
                        memBroker.close();
                        return null;
                    }


                    // forward to the back action, all back need to send with redirect=true
                    if (thisForm.gettask() == 0) {
                        // If the page from this action was called is a project
                        request.setAttribute("company", company);
                        return (new ActionForward(mapping.findForward("viewProject").getPath() + "&id=" + thisForm.getproject(), true));

                    } else {
                            System.out.println("AS5");
                        if  ( !request.getParameter("topics").equals("addFile") ){
                            // If the page from this action was called is a task
                            request.setAttribute("company", company);
                        return (new ActionForward(mapping.findForward("viewTask").getPath() + "&id=" + thisForm.gettask(), true));
                        }else{
                            // If the page from this action was called is a task
                            request.setAttribute("company", company);
                        return (new ActionForward(mapping.findForward("viewTopic").getPath() + "&id=" + thisForm.gettask(), true));
                        }
                    }

                } else if (action.equals("applyUpdate")) {
                    
                    // ======================================================================
                    //   Se trata del update de un archivo que ya existe, lo que se hace 
                    // es sobreescribir el file en existencia y reemplazarlo por este 
                    // nuevo.
                    // ======================================================================
                    filesData data = new filesData();

                    //retrieve the text data
                    String text = thisForm.getcomments();

                    //retrieve the file representation
                    FormFile file = thisForm.getTheFile();

                    //retrieve the file name
                    String fileName = file.getFileName();

                    //retrieve the content type
                    String contentType = file.getContentType();

                    // Retrieve the project id and task (if task exists)
                    int projectid = thisForm.getproject();
                    int taskid = thisForm.gettask();

                    //retrieve the file size
                    int size = (file.getFileSize());

                    String dataf = null;

                    try {
                        //retrieve the file data
                        ByteArrayOutputStream baos = new ByteArrayOutputStream();
                        InputStream stream = file.getInputStream();


                        data = (filesData) broker.getData(thisForm.getid(), user.getId_account());
                        // Save the information about the file in DB                            
                        data.setcomments(thisForm.getcomments());
                        data.setupload(new java.sql.Timestamp(Calendar.getInstance().getTimeInMillis()));
                        broker.update(data);

                        String fullpath = data.getPath();

                        File theFile = new File(fullpath);

                        // Create directory for the file, if requested.
                        if (theFile.getParentFile() != null) {
                            theFile.getParentFile().mkdirs();
                        }

                        // We delete the original file.
                        theFile.delete();

                        //write the file to the file specified
                        OutputStream bos = new FileOutputStream(theFile);
                        int bytesRead = 0;
                        byte[] buffer = new byte[8192];
                        while ((bytesRead = stream.read(buffer, 0, 8192)) != -1) {
                            bos.write(buffer, 0, bytesRead);
                        }
                        bos.close();

                        //close the stream
                        stream.close();
                    } catch (FileNotFoundException fnfe) {
                        System.out.println("Error en fileAction: " + fnfe.toString());
                        logger.logp(Level.SEVERE, "files.do", "perform",
                                "Fatal Error: " + fnfe.toString());

                        broker.close();
                        memBroker.close();
                        return null;
                    } catch (IOException ioe) {
                        System.out.println("Error en fileAction: " + ioe.toString());
                        logger.logp(Level.SEVERE, "files.do", "perform",
                                "Fatal Error: " + ioe.toString());

                        broker.close();
                        memBroker.close();
                        return null;
                    }


                    // forward to the back action, all back need to send with redirect=true
                    if (thisForm.gettask() == 0) {
                        // If the page from this action was called is a project
                        request.setAttribute("company", company);
                        return (new ActionForward(mapping.findForward("viewProject").getPath() + "&id=" + thisForm.getproject(), true));

                    } else {
                        // If the page from this action was called is a task
                        request.setAttribute("company", company);
                        return (new ActionForward(mapping.findForward("viewTask").getPath() + "&id=" + thisForm.gettask(), true));
                    }

                } else if (action.equals("applyEdit")) {
                    // Se trata de la aplicacion de un update en la BD
                    filesData data = (filesData) broker.getData(thisForm.getid(), user.getId_account());
                    data.setcomments(thisForm.getcomments());

                    // We add the new record.
                    broker.update(data);

                    // Y por ultimo lo agregramos al contexto para que el usuario vea
                    // la lista actualizada.
                    // forward to the back action, all back need to send with redirect=true
                    if (data.gettask() == 0) {
                        request.setAttribute("company", company);
                        if  ( !request.getParameter("topics").equals("addFile") ){
                        // If the page from this action was called is a project
                            return (new ActionForward(mapping.findForward("viewProject").getPath() + "&id=" + data.getproject(), true));
                        }else{
                                 return (new ActionForward(mapping.findForward("viewTopic").getPath() + "&id=" + data.gettopic(), true));
                        }

                    } else {
                        // If the page from this action was called is a task
                        request.setAttribute("company", company);
                        return (new ActionForward(mapping.findForward("viewTask").getPath() + "&id=" + data.gettask(), true));
                    }

                } else if (action.equals("addToSite") || action.equals("removeFromSite")) {
                    // Se trata de agregar al site un archivo.

                    // get the string with ids separate by "," character, and split in array os strings
                    String[] fields = (request.getParameter("checkedItems") + ",").split(patternStr);
                    String lista = "";
                    for (int i = 0; i < fields.length; i++) {
                        lista += fields[i] + " - ";
                    }
                    ArrayList items = broker.getItems(fields, user.getId_account());
                    filesData data;
                    int id=0;
                    // Se toman todos los archivos que se enviaron
                    for (int i = 0; i < items.size(); i++) {
                        data = (filesData) items.get(i);

                        // Se marca como publicado  o no de acuerdo a la operacion
                        if (action.equals("addToSite")) {
                            data.setpublished("1");
                        } else {
                            data.setpublished("0");
                        }
                        broker.update(data);
                        
                        id=data.gettopic();
                    }
                    if (thisForm.getfromPage().equals("viewProject")) {
                        
                            System.out.println("IDDDD"+ id);
                        request.setAttribute("company", company);
                        
                        if  ( !request.getParameter("topics").equals("addFile") ){
                        // return to the page that list the files...
                        return (new ActionForward(mapping.findForward("viewProject").getPath() +
                                "&id=" + thisForm.getproject(), false));
                        }else{
                            System.out.println("ID "+ id);
                            return (new ActionForward(mapping.findForward("viewTopic").getPath() + "&id=" + id, true));
                        }
                    } else {
                        
                        // Se hace desde una tarea
                        request.setAttribute("company", company);
                        return (new ActionForward(mapping.findForward("viewTask").getPath() +
                                "&id=" + request.getParameter("task"), false));
                        

                    }

                } else if (action.equals("showAll") || action.equals("sortAll")) {
                    // Se trata de un showAll de las tareas asociadas a un proyecto determinado.                    
                    Iterator e;
                    if (thisForm.getfromPage().equals("viewProject")) {
                        e = broker.getListByProject(thisForm.getsortColumn(),
                                thisForm.getsortOrder(),
                                thisForm.getproject(), 0, user.getId_account());
                    } else {
                        e = broker.getList(thisForm.getsortColumn(),
                                thisForm.getsortOrder(),
                                thisForm.gettask(),
                                0, user.getId_account());
                    }

                    // Debemos convertir el iterador en un arraylist.
                    ArrayList lista = new ArrayList();
                    while (e.hasNext()) {
                        lista.add(e.next());
                    }
                    // Se guarda la lista de files asociados a esta tarea.
                    request.setAttribute("listFiles", lista);

                    if (thisForm.getOperation().equalsIgnoreCase("sortAll")) {
                        // Negamos el tipo de ordenamiento
                        if (thisForm.getsortOrder().equalsIgnoreCase("ASC")) {
                            thisForm.setsortOrder("DESC");
                        } else {
                            thisForm.setsortOrder("ASC");
                        }
                    }

                    if (thisForm.getfromPage().equals("viewProject")) {
                        projectsBroker projBroker = new projectsBroker();
                        projectsData projectMember = (projectsData) projBroker.getData(thisForm.getproject(), user.getId_account());
                        projBroker.close();
                        // Se agrega el link para el menu con la ruta
                        request.setAttribute("menuRoute",
                                "<a href='./home.do'>" +
                                java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("header.displayStart") + "</a>&nbsp;/" +
                                "<a href='./projects.do?operation=view&id=" +
                                projectMember.getid() + "'>" +
                                projectMember.getname() + "</a>&nbsp;/" +
                                java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("common.allFiles"));
                    } else {
                        tasksBroker taskBroker = new tasksBroker();
                        tasksData dataTask = (tasksData) taskBroker.getData(thisForm.gettask(), user.getId_account());
                        taskBroker.close();
                        // Se agrega el link para el menu con la ruta
                        request.setAttribute("menuRoute",
                                "<a href='./home.do'>" +
                                java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("header.displayStart") + "</a>&nbsp;/" +
                                "<a href='./tasks.do?operation=view&id=" +
                                dataTask.getid() + "'>" +
                                dataTask.getname() + "</a>&nbsp;/" +
                                java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("common.allFiles"));
                    }
                    request.setAttribute("company", company);
                    return (mapping.findForward("displayAllFilesByProject"));
                }

            } catch (Exception e) {
                servlet.log("[ERROR] Action at final catch: " + e.getMessage());
                logger.logp(Level.SEVERE, "files.do", "perform",
                        "Fatal Error: " + e.toString());
                e.printStackTrace();
                request.setAttribute("company", company);
                return (mapping.findForward("listing"));

            } finally {
                broker.close();
                memBroker.close();
                team.close();
            }
            request.setAttribute("company", company);
            // Default if everthing else fails
            return (mapping.findForward("listing"));
        }
    }
}
