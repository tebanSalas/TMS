/*
 * Generated by Flecha Roja Technologies Auto Generator
 *
 * Created on January 9, 2003, 11:31 AM
 */
package com.unify.webcenter.action;

import java.io.IOException;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

import org.apache.struts.action.*;
import org.apache.commons.beanutils.*;

import com.unify.webcenter.data.*;
import com.unify.webcenter.broker.*;
import com.unify.webcenter.form.*;
import com.unify.webcenter.conf.TMSConfigurator;

import java.util.ResourceBundle;
import java.util.Locale;

/**
 * <p>This action works with both JSP and Velocity templates.
 * The type of template to be used is defined in the Struts configuration
 * file.</p>
 *
 * <p>The action support an <i>action</i> URL parameter. This URL parameter
 * controls what this action class does. The following values are supported:</p>
 * <ul>
 *   <li>save    Save the record
 *   <li>delete	 Delete the record
 *   <li>edit    Edit the record
 *   <li>show	 Show the record
 * </ul>
 *
 *
 * @author Administrator 
 */
public class mailAction extends Action {

    private tasksBroker taskBroker;
    private membersBroker memBroker;
    private projectsBroker projBroker;
    private topicsBroker topicBroker;
    private ResourceBundle labels;

    /** Creates a new instance of calendarAction */
    public mailAction() {
        labels = ResourceBundle.getBundle("ApplicationResources", new Locale(TMSConfigurator.getMailLanguage(), ""));
    }

    /**
     * Handle server requests.
     *
     * @param mapping The ActionMapping used to select this instance
     * @param actionForm The optional ActionForm bean for this request (if any)
     * @param request The HTTP request we are processing
     * @param response The HTTP response we are creating
     *
     * @exception IOException if an input/output error occurs
     * @exception ServletException if a servlet exception occurs
     */
    public ActionForward execute(ActionMapping mapping,
            ActionForm form,
            HttpServletRequest request,
            HttpServletResponse response)
            throws IOException, ServletException {
        String action = null;
        int type = 0;
        int id = 0;
        int fromid = 0, toid = 0;
        HttpSession session;
        tasksBroker taskBroker;
        membersBroker memBroker;
        projectsBroker projBroker;
        topicsBroker topicBroker;
        accountsBroker accBroker;
        teamsBroker teamBroker;
        session = request.getSession(false);

        taskBroker = new tasksBroker();
        memBroker = new membersBroker();
        accBroker = new accountsBroker();
        projBroker = new projectsBroker();
        topicBroker = new topicsBroker();
        teamBroker = new teamsBroker();
        try {
            session = request.getSession();
// Se obtiene la referencia al loginData dentro de la session.
            loginData user = (loginData) session.getAttribute("login");
           // String mainURL = TMSConfigurator.getMainURL();
String mainURL = "";
           //  session.setAttribute("mainUrl", session.getAttribute("mainUrl"));
            // String mainURL = session.getAttribute("mainUrl").toString();
            String company = TMSConfigurator.getCompany(user);
            String website = TMSConfigurator.getWebSite(user);
            String creator = TMSConfigurator.getCreator(user);
            session.setAttribute(org.apache.struts.Globals.LOCALE_KEY, new Locale(TMSConfigurator.getMailLanguage(), ""));

            mailForm thisForm = (mailForm) form;

            // fetch action from form
            action = thisForm.getOperation();
            type = thisForm.getType();
            id = thisForm.getId();
            //fromid =  thisForm.getFromId();
            //toid = thisForm.getToId();

            fromid = Integer.parseInt(request.getParameter("fromid"));
            toid = Integer.parseInt(request.getParameter("toid"));
            int account = Integer.parseInt(request.getParameter("userAccount"));

            //Se define un Calendar.
            //Calendar now = Calendar.getInstance();
            servlet.log("[DEBUG] mailAction at perform(): Action is " + action);

            // Retrieve some information
            membersData from_member = (membersData) memBroker.getData(fromid, account);

            membersData to_member = (membersData) memBroker.getData(toid, account);
            //tasksData task = null;
            tasksData task = new tasksData();
            projectsData project = null;

            java.text.SimpleDateFormat df = new java.text.SimpleDateFormat("dd-MM-yyyy h:mm a");


            // Determine what to do
            if (action.equals("taskassignment") || action.equals("prioritytaskchange") ||
                    action.equals("statustaskchange") || action.equals("duedatetaskchange") ||
                    action.equals("taskrejected") || action.equals("statustaskclosed") || action.equals("taskreasigned")
                    || action.equals("sendqatnotification")
                || action.equals("sendqafnotification")
                    ) {



                // Se lee la tarea y proyecto asociado.
                task = (tasksData) taskBroker.getData(id, account);
                project = (projectsData) projBroker.getData(task.getproject(), account);

                accountsData accounts = new accountsData();
            //String mainURL = String.valueOf(session.getAttribute("mainUrl"));
                accounts = (accountsData) accBroker.getData(project.getId_account());
                System.out.println("ID PROY: "+project.getId_account());
                mainURL=accounts.getMain_url();

                String msg = javax.mail.internet.MimeUtility.decodeText(thisForm.getExtra());

                System.out.println("fDESC: "+task.getFormatedDescription() );
                System.out.println("DESC: "+task.getdescription() );
                request.setAttribute("message_line", labels.getString("email." + action + ".message") +
                        " " + msg);
                request.setAttribute("nameId", labels.getString("common.Id"));
                request.setAttribute("nameLabel", labels.getString("common.Name"));
                request.setAttribute("dueDateLabel", labels.getString("common.deliverDate"));
                request.setAttribute("priorityLabel", labels.getString("common.Priority"));
                request.setAttribute("statusLabel", labels.getString("common.Status"));
                request.setAttribute("descriptionLabel", labels.getString("common.Description"));
                request.setAttribute("projectLabel", labels.getString("common.Project"));
                request.setAttribute("clientLabel", labels.getString("common.Organization"));
                request.setAttribute("tasksLabel", labels.getString("common.Tasks.name"));
              
                if (!action.equals("taskreasigned"))
                request.setAttribute("assigned", labels.getString("common.assignedTo"));
                else
                request.setAttribute("assigned", labels.getString("common.reassignedTo"));
                    
                    
                request.setAttribute("taskid", "" + task.getid());
                request.setAttribute("description", task.getFormatedDescription());
                request.setAttribute("duedate", task.getFormatedDueDate());
                
                System.out.println("NAMES "+ task.getname());
                request.setAttribute("name", task.getname());
                request.setAttribute("status", "" + task.getstatus());
                request.setAttribute("priority", "" + task.getpriority());
                request.setAttribute("project", project.getname());
                request.setAttribute("client", project.getparentOrganizations().getname());
                request.setAttribute("mainURL", mainURL);
                request.setAttribute("company", company);
                request.setAttribute("website", website);
                request.setAttribute("creator", creator);
                request.setAttribute("projectid", "" + project.getid());
                
               
                if (action.equals("statustaskclosed") ) {
                    request.setAttribute("assignedTo", from_member.getname());
                } else {
                    request.setAttribute("assignedTo", task.getparentAssigned().getname());
                }

                request.setAttribute("userProfile", to_member.getprofile());
                if (action.equals("statustaskclosed")) {
                    try {
                        java.text.DateFormat df1 = java.text.DateFormat.getDateInstance(java.text.DateFormat.MEDIUM);
                        Calendar fecha = Calendar.getInstance();

                        request.setAttribute("fecha", df1.format(fecha.getTime()));
                    } catch (Exception e) {
                        request.setAttribute("fecha", "");
                    }
                    // La notificacion de tarea cerrada por cliente es un poco diferente
                    return (mapping.findForward("notification-close-html"));
                    
                }else if (action.equals("sendqatnotification")
                || action.equals("sendqafnotification")) {
                    return (mapping.findForward("notification-qa-html"));
                } else {
                    
                    if (action.equals("taskreasigned")){
                        return (mapping.findForward("taskreasigned-html"));
                    }
                    if (type == 0) {
                        return (mapping.findForward("notification-text"));
                    } else {
                        return (mapping.findForward("notification-html"));
                    }
                }

            } else if (action.equals("quotesended") || action.equals("quoterejected") ||
                    action.equals("quoteacepted")) {
                // Se lee la tarea y proyecto asociado.
                task = (tasksData) taskBroker.getData(id, account);
                project = (projectsData) projBroker.getData(task.getproject(), account);
                accountsData accounts = new accountsData();
            //String mainURL = String.valueOf(session.getAttribute("mainUrl"));
                accounts = (accountsData) accBroker.getData(project.getId_account());
                mainURL=accounts.getMain_url();
                String predefined_messages = "";
                predefined_messagesBroker pm = new predefined_messagesBroker();
                predefined_messagesData md = (predefined_messagesData) pm.getData(task.getmessage(), account);
                pm.close();
                predefined_messages = new String(md.gettext());

                request.setAttribute("today", df.format(Calendar.getInstance().getTime()));
                request.setAttribute("to_name", to_member.getname());
                request.setAttribute("project", project.getname());
                request.setAttribute("projectId", "" + project.getid());
                request.setAttribute("taskid", String.valueOf(task.getid()));
                request.setAttribute("task", task.getname());
                String msg = javax.mail.internet.MimeUtility.decodeText(thisForm.getExtra());
                request.setAttribute("message_line", labels.getString("email." + action + ".message") + msg);
                request.setAttribute("description", task.getFormatedDescription());
                request.setAttribute("estimated_time", task.getestimated_time());
                request.setAttribute("fare", "" + task.getfare());
                request.setAttribute("total", task.getFormatedTotalEstimatedCost());
                request.setAttribute("client", project.getparentOrganizations().getname());
                request.setAttribute("predefined_messages", predefined_messages);
                request.setAttribute("from_name", from_member.getname());
                request.setAttribute("from_email_work", from_member.getemail_work());
                request.setAttribute("mainURL", mainURL);
                request.setAttribute("company", company);
                request.setAttribute("website", website);
                request.setAttribute("creator", creator);
                // De acuerdo al tipo se regresa la version en TEXTO o HTML
                if (type == 0) {
                    return (mapping.findForward("quotation-text"));
                } else {
                    return (mapping.findForward("quotation-html"));
                }

            } else if (action.equals("newTopic") || action.equals("newTopicToCreator")) {
                // Se trata del envio de una notificacion de discusion
                topicsData topicData = (topicsData) topicBroker.getData(id, account);
                project = (projectsData) projBroker.getData(topicData.getproject(), account);
                accountsData accounts = new accountsData();
            //String mainURL = String.valueOf(session.getAttribute("mainUrl"));
                accounts = (accountsData) accBroker.getData(project.getId_account());
                mainURL=accounts.getMain_url();
                // Decodeamos el texto del cuerpo del mensaje
                String msg = javax.mail.internet.MimeUtility.decodeText(thisForm.getExtra());

                // Se setean los valores del caso
                request.setAttribute("subject", topicData.getsubject());
                request.setAttribute("createdBy", topicData.getparentOwner().getname());
                request.setAttribute("proyectName", project.getname());
                request.setAttribute("Idproject", ""+project.getid());
                //request.setAttribute("message", thisForm.getExtra());
                request.setAttribute("message", msg);

                request.setAttribute("mainURL", mainURL);
                request.setAttribute("company", company);
                request.setAttribute("website", website);
                request.setAttribute("creator", creator);
                request.setAttribute("topicid", "" + topicData.getid());
                request.setAttribute("created", "" + java.text.DateFormat.getDateTimeInstance(java.text.DateFormat.MEDIUM, java.text.DateFormat.MEDIUM).
                        format(Calendar.getInstance().getTime()));

                // Se determina si la persona a la cual se le va a enviar la notificacion
                // es un usuario externo o no, esto con la finalidad de seleccionar el template
                // que debe de emplearse.
                request.setAttribute("userProfile", to_member.getprofile());

                if (action.equals("newTopicToCreator")) {
                    // De acuerdo al tipo se regresa la version en TEXTO o HTML                          
                    return (mapping.findForward("newTopicToCreator-html"));
                } else {
                    // De acuerdo al tipo se regresa la version en TEXTO o HTML
                    if (type == 0) {
                        return (mapping.findForward("newTopic-text"));
                    } else {
                        return (mapping.findForward("newTopic-html"));
                    }

                }
            }else if (action.equals("newUser")) {
                // Se trata del envio de una notificacion de discusion
                membersData memData = (membersData) memBroker.getData(thisForm.getId(), account);
                accountsData accounts = new accountsData();
            //String mainURL = String.valueOf(session.getAttribute("mainUrl"));
                accounts = (accountsData) accBroker.getData(memData.getId_account());
                mainURL=accounts.getMain_url();
                // Decodeamos el texto del cuerpo del mensaje
                String msg = javax.mail.internet.MimeUtility.decodeText(thisForm.getExtra());

                // Se setean los valores del caso 
                request.setAttribute("login1", memData.getlogin());
                request.setAttribute("password", msg);
                request.setAttribute("userName1", memData.getname());

                request.setAttribute("mainURL", mainURL);
                request.setAttribute("company", company);
                request.setAttribute("website", website);
                request.setAttribute("creator", creator);
                
                System.out.println(TMSConfigurator.getNewUserReferenceGuide());
                request.setAttribute("userGuide", TMSConfigurator.getNewUserReferenceGuide());

                // Se determina si la persona a la cual se le va a enviar la notificacion
                // es un usuario externo o no, esto con la finalidad de seleccionar el template
                // que debe de emplearse.
                request.setAttribute("userProfile", to_member.getprofile());

                // De acuerdo al tipo se regresa la version en TEXTO o HTML                       
                return (mapping.findForward("newUser"));

            } else if (action.equals("alterUserPass")) {

                // Se trata del envio de una notificacion de discusion
                membersData memData = (membersData) memBroker.getData(id, account);
                accountsData accounts = new accountsData();
            //String mainURL = String.valueOf(session.getAttribute("mainUrl"));
                accounts = (accountsData) accBroker.getData(memData.getId_account());
                mainURL=accounts.getMain_url();
                // Decodeamos el texto del cuerpo del mensaje
                String msg = javax.mail.internet.MimeUtility.decodeText(thisForm.getExtra());
                request.setAttribute("message_line", labels.getString("email.alterUserPass.subject"));

                // Se setean los valores del caso
                request.setAttribute("login", memData.getlogin());
                request.setAttribute("password", msg);
                request.setAttribute("userName", memData.getname());
                request.setAttribute("email", memData.getemail_work());
                request.setAttribute("mainURL", mainURL);
                request.setAttribute("company", company);
                request.setAttribute("website", website);
                request.setAttribute("creator", creator);

                // Se determina si la persona a la cual se le va a enviar la notificacion
                // es un usuario externo o no, esto con la finalidad de seleccionar el template
                // que debe de emplearse.
                request.setAttribute("userProfile", to_member.getprofile());

                // De acuerdo al tipo se regresa la version en TEXTO o HTML                       
                return (mapping.findForward("alterUserPass"));

                
            
            } else if (action.equals("alterUser")) {

                // Se trata del envio de una notificacion de discusion
                membersData memData = (membersData) memBroker.getData(id, account);
                accountsData accounts = new accountsData();
            //String mainURL = String.valueOf(session.getAttribute("mainUrl"));
                accounts = (accountsData) accBroker.getData(memData.getId_account());
                mainURL=accounts.getMain_url();

                // Decodeamos el texto del cuerpo del mensaje
                String msg = javax.mail.internet.MimeUtility.decodeText(thisForm.getExtra());
                request.setAttribute("message_line", labels.getString("email.alterUser.subject"));

                // Se setean los valores del caso
                request.setAttribute("login", memData.getlogin());
                request.setAttribute("userName", memData.getname());
                request.setAttribute("email", memData.getemail_work());
                request.setAttribute("mainURL", mainURL);
                request.setAttribute("company", company);
                request.setAttribute("website", website);
                request.setAttribute("creator", creator);

                // Se determina si la persona a la cual se le va a enviar la notificacion
                // es un usuario externo o no, esto con la finalidad de seleccionar el template
                // que debe de emplearse.
                request.setAttribute("userProfile", to_member.getprofile());

                // De acuerdo al tipo se regresa la version en TEXTO o HTML                       
                return (mapping.findForward("alterUser"));
            } else if (action.equals("newPost")) {
                // Se trata del envio de una respuesta a una notificacion de discusion
                topicsData topicData = (topicsData) topicBroker.getData(id, account);
                project = (projectsData) projBroker.getData(topicData.getproject(), account);
                accountsData accounts = new accountsData();
            //String mainURL = String.valueOf(session.getAttribute("mainUrl"));
                accounts = (accountsData) accBroker.getData(project.getId_account());
                mainURL=accounts.getMain_url();
                // Se setean los valores del caso
                request.setAttribute("subject", topicData.getsubject());
                request.setAttribute("createdBy", topicData.getparentOwner().getname());
                request.setAttribute("proyectName", project.getname());
                request.setAttribute("Idproject", ""+project.getid());
                String msg = javax.mail.internet.MimeUtility.decodeText(thisForm.getExtra());
                request.setAttribute("message", msg);
                request.setAttribute("mainURL", mainURL);
                request.setAttribute("company", company);
                request.setAttribute("website", website);
                request.setAttribute("creator", creator);
                request.setAttribute("topicid", "" + topicData.getid());

                // Se determina si la persona a la cual se le va a enviar la notificacion
                // es un usuario externo o no, esto con la finalidad de seleccionar el template
                // que debe de emplearse.
                request.setAttribute("userProfile", to_member.getprofile());

                // De acuerdo al tipo se regresa la version en TEXTO o HTML
                if (type == 0) {
                    return (mapping.findForward("newPost-text"));
                } else {
                    return (mapping.findForward("newPost-html"));
                }

            } else if (action.equals("accounting")) {
                // Se lee la tarea y proyecto asociado.
                task = (tasksData) taskBroker.getData(id, account);
                project = (projectsData) projBroker.getData(task.getproject(), account);
                accountsData accounts = new accountsData();
            //String mainURL = String.valueOf(session.getAttribute("mainUrl"));
                accounts = (accountsData) accBroker.getData(project.getId_account());
                mainURL=accounts.getMain_url();
                request.setAttribute("dueDateLabel", labels.getString("common.deliverDate"));
                request.setAttribute("priorityLabel", labels.getString("common.Priority"));
                request.setAttribute("statusLabel", labels.getString("common.Status"));
                request.setAttribute("descriptionLabel", labels.getString("common.Description"));
                request.setAttribute("projectLabel", labels.getString("common.Project"));
                request.setAttribute("clientLabel", labels.getString("common.Organization"));

                request.setAttribute("today", df.format(Calendar.getInstance().getTime()));
                request.setAttribute("project", project.getname());
                request.setAttribute("client", project.getparentOrganizations().getname());
                request.setAttribute("phone", project.getparentOrganizations().getphone());
                request.setAttribute("email", project.getparentOrganizations().getemail());
                request.setAttribute("taskid", String.valueOf(task.getid()));
                request.setAttribute("taskname", task.getname());
                request.setAttribute("description", task.getFormatedDescription());
                request.setAttribute("duedate", task.getFormatedDueDate());
                request.setAttribute("estimated_time", task.getestimated_time());
                request.setAttribute("fare", "" + task.getfare());
                request.setAttribute("total", task.getFormatedTotalEstimatedCost());
                request.setAttribute("from_name", from_member.getname());
                request.setAttribute("from_email_work", from_member.getemail_work());
                request.setAttribute("mainURL", mainURL);
                request.setAttribute("company", company);
                request.setAttribute("website", website);
                request.setAttribute("creator", creator);

                if (type == 0) {
                    return (mapping.findForward("accounting-text"));
                } else {
                    return (mapping.findForward("accounting-html"));
                }
            } else if (action.equals("meetingrequest")) {
                calendarBroker calBroker = new calendarBroker();
                calendarData calData = (calendarData) calBroker.getData(id, account);
                accountsData accounts = new accountsData();
            //String mainURL = String.valueOf(session.getAttribute("mainUrl"));
                accounts = (accountsData) accBroker.getData(calData.getId_account());
                mainURL=accounts.getMain_url();
                // Se setean los valores del caso
                request.setAttribute("meetingsubject", calData.getsubject());
                request.setAttribute("projectId", "" + calData.getprojectId());
                request.setAttribute("projectName", calData.getprojectName());
                request.setAttribute("meetingdate", calData.getFormatedDate());

                request.setAttribute("meetinginithour", "" + calData.getHourStart() + ":" + calData.getMinStart());
                request.setAttribute("meetingendhour", "" + calData.getHourEnd() + ":" + calData.getMinEnd());
                request.setAttribute("name", to_member.getname());
                request.setAttribute("hostmember", from_member.getname());
                request.setAttribute("mainURL", mainURL);
                request.setAttribute("company", company);
                request.setAttribute("website", website);
                request.setAttribute("creator", creator);

                // De acuerdo al tipo se regresa la version en TEXTO o HTML
                if (type == 0) {
                    return (mapping.findForward("meetingrequest-text"));
                } else {
                    return (mapping.findForward("meetingrequest-html"));
                }
            } else if (action.equals("meetingrejected")) {
                calendarBroker calBroker = new calendarBroker();
                calendarData calData = (calendarData) calBroker.getData(id, account);
                accountsData accounts = new accountsData();
            //String mainURL = String.valueOf(session.getAttribute("mainUrl"));
                accounts = (accountsData) accBroker.getData(calData.getId_account());
                mainURL=accounts.getMain_url();
                // Se setean los valores del caso
                request.setAttribute("meetingsubject", calData.getsubject());
                request.setAttribute("projectId", "" + calData.getprojectId());
                request.setAttribute("projectName", calData.getprojectName());
                request.setAttribute("meetingdate", calData.getend_date());
                request.setAttribute("meetinginithour", "" + calData.getHourStart() + ":" + calData.getMinStart());
                request.setAttribute("meetingendhour", "" + calData.getHourEnd() + ":" + calData.getMinEnd());
                request.setAttribute("name", request.getParameter("name"));
                request.setAttribute("hostmember", request.getParameter("hostmember"));
                request.setAttribute("mainURL", mainURL);
                request.setAttribute("company", company);
                request.setAttribute("website", website);
                request.setAttribute("creator", creator);
                // De acuerdo al tipo se regresa la version en TEXTO o HTML
                if (type == 0) {
                    return (mapping.findForward("meetingrejected-text"));
                } else {
                    return (mapping.findForward("meetingrejected-html"));
                }
            } else if (action.equals("meetingaccepted")) {
                calendarBroker calBroker = new calendarBroker();
                calendarData calData = (calendarData) calBroker.getData(id, account);
                accountsData accounts = new accountsData();
            //String mainURL = String.valueOf(session.getAttribute("mainUrl"));
                accounts = (accountsData) accBroker.getData(calData.getId_account());
                mainURL=accounts.getMain_url();
                // Se setean los valores del caso
                request.setAttribute("meetingsubject", calData.getsubject());
                request.setAttribute("projectId", "" + calData.getprojectId());
                request.setAttribute("projectName", calData.getprojectName());
                request.setAttribute("meetingdate", calData.getdate());
                request.setAttribute("meetinginithour", "" + calData.getHourStart() + ":" + calData.getMinStart());
                request.setAttribute("meetingendhour", "" + calData.getHourEnd() + ":" + calData.getMinEnd());
                request.setAttribute("name", request.getParameter("name"));
                request.setAttribute("hostmember", request.getParameter("hostmember"));
                request.setAttribute("mainURL", mainURL);
                request.setAttribute("company", company);
                request.setAttribute("website", website);
                request.setAttribute("creator", creator);

                // De acuerdo al tipo se regresa la version en TEXTO o HTML
                if (type == 0) {
                    return (mapping.findForward("meetingaccepted-text"));
                } else {
                    return (mapping.findForward("meetingaccepted-html"));
                }
            } else if (action.equals("accountcreated")) {
                // Se trata del envio de una notificacion de discusion
                accountsData accData = (accountsData) accBroker.getData(fromid);
                mainURL=accData.getMain_url();
                // Decodeamos el texto del cuerpo del mensaje
                String msg = javax.mail.internet.MimeUtility.decodeText(thisForm.getExtra());

                // Se setean los valores del caso
                request.setAttribute("accountName", accData.getName());
                request.setAttribute("accountDescription", accData.getDescription());
                request.setAttribute("accountEmail", accData.getEmail());
                request.setAttribute("accountUserFare", accData.getUser_fare());
                request.setAttribute("companyAccount", accData.getCompany());
                request.setAttribute("website", accData.getWebsite());
                request.setAttribute("PersonalCompanyName", accData.getCreator());

                request.setAttribute("mainURL", mainURL);
                request.setAttribute("company", company);
                //request.setAttribute("website", website);
                request.setAttribute("creator", creator);

                return (mapping.findForward("newAccount"));
            // De acuerdo al tipo se regresa la version en TEXTO o HTML                       
            // return (mapping.findForward("newAccount"));

            }else if (action.equals("notification-endoftrial")){
                 // Decodeamos el texto del cuerpo del mensaje
                String msg = javax.mail.internet.MimeUtility.decodeText(thisForm.getExtra());
                return (mapping.findForward("notification-endoftrial"));
            }else if (action.equals("finishedtasksnotification")){
                membersData mData= new membersData();
                mData= (membersData) memBroker.getData(toid);
                Iterator e= projBroker.getListOfActiveProyectsByMember("name", "ASC", mData.getid(), mData.getId_account());
               
                String msg = javax.mail.internet.MimeUtility.decodeText(thisForm.getExtra());
        projectsData proyecto;
        teamsData    team;
        tasksData    taskdata;
        long         end, ini, dif, margen;
        boolean      atrasado = false;
        Calendar hoy = Calendar.getInstance();
        StringBuffer message = new StringBuffer(""), listaTareas = new StringBuffer();


        
        // Se revisan todos los proyectos   
        while (e.hasNext()) {
            proyecto = (projectsData) e.next();
             accountsData accounts = new accountsData();
            //String mainURL = String.valueOf(session.getAttribute("mainUrl"));
                accounts = (accountsData) accBroker.getData(proyecto.getId_account());
                mainURL=accounts.getMain_url();
            listaTareas = new StringBuffer("");
            System.out.println("CHECKING (" + proyecto.getname() + ")");                        
            atrasado = false;

            
            // Se traen todas las tareas de ese proyecto que esten terminadas y ademas
            // finalizadas.
            Iterator eTareas = taskBroker.getListByProjectEnded("id", "name", proyecto.getid(), 0); 
            // Se sacan todas las tareas de este proyecto.
            while (eTareas.hasNext()) {
                taskdata = (tasksData) eTareas.next();  
                System.out.println("\tCHECKING (" + task.getname() + ")");      
    
            //<a class=\"LinkText2\" href=\""+TMSConfigurator.getMainURL()+"/topics.do?operation=view&id="+ topic.getid()+ "\">" +topic.getsubject() +"</a>"+ "</li>"
            //<a class=\"LinkText2\" href=\""+TMSConfigurator.getMainURL()+"/tasks.do?operation=view&id="+ taskdata.getId()+ "\">" +taskdata.getId() + " - <" + taskdata.getname() + "> " +"</a>"+ "</li>"
                         
            listaTareas.append("\t" + "<a class=\"LinkText2\" href=\""+"http://localhost:8084/tms"+"/tasks.do?operation=view&id=\""+ taskdata.getid() + "\">" +taskdata.getid() + " - <" + taskdata.getname() + "> " +"</a>"+ "</li>" + "<br>");
                            System.out.println("1235!");
            atrasado = true;
             // While de las tareas
            }
             request.setAttribute("message_line", labels.getString("email." + action + ".message") +
                        " " + msg);

                request.setAttribute("projectLabel", labels.getString("common.Project"));
                request.setAttribute("clientLabel", labels.getString("common.Organization"));
                request.setAttribute("tasksLabel", labels.getString("common.Tasks.name"));
                
                request.setAttribute("project", project.getname());
                request.setAttribute("client", project.getparentOrganizations().getname());
                request.setAttribute("mainURL", mainURL);
                request.setAttribute("company", company);
                request.setAttribute("website", website);
                request.setAttribute("creator", creator);
                request.setAttribute("listTasks", listaTareas);
                request.setAttribute("userProfile", to_member.getprofile());
            
                if (atrasado) {
//                // Para cada proyecto se extra el equipo de trabajo.
//                Iterator teamIterator = teamBroker.getListByProjectWithCloseRoleOrClientManager("id", "ASC", 
//                    proyecto.getid(), 0);
//                // Para cada miembro del equipo que tiene los permisos.
//                while (teamIterator.hasNext()) {
//                    team = (teamsData) teamIterator.next();
                    return (mapping.findForward("tasksverification-html"));
//                }
                } // if
             } // de los proyectos
            }

                
            
        } catch (Exception e) {
            servlet.log("[ERROR] Action at final catch: " + e.getMessage());
            e.printStackTrace();

        } finally {
            // Se cierran los brokers definidos.
            taskBroker.close();
            memBroker.close();
            projBroker.close();
            topicBroker.close();
            accBroker.close();
            
        }

        // Default if everthing else fails
        return (mapping.findForward("error"));
    }
}
