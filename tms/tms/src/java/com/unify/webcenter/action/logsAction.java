/*
 * Generated by Flecha Roja Technologies Auto Generator
 *
 * Created on January 9, 2003, 11:31 AM
 */

package com.unify.webcenter.action;

import java.io.IOException;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

import org.apache.struts.action.*;
import org.apache.commons.beanutils.*;

import com.unify.webcenter.data.*;
import com.unify.webcenter.broker.*;
import com.unify.webcenter.form.*;
import com.unify.webcenter.conf.TMSConfigurator;


/**
 * <p>This action works with both JSP and Velocity templates.
 * The type of template to be used is defined in the Struts configuration
 * file.</p>
 *
 * <p>The action support an <i>action</i> URL parameter. This URL parameter
 * controls what this action class does. The following values are supported:</p>
 * <ul>
 *   <li>save    Save the record
 *   <li>delete	 Delete the record
 *   <li>edit    Edit the record
 *   <li>show	 Show the record
 * </ul>
 *
 *
 * @author Administrator 
 */

public class logsAction extends Action {
    private logsBroker broker;    

    /** Creates a new instance of calendarAction */
    public logsAction() {
	broker = new logsBroker();
    }
    
    /**
     * Handle server requests.
     *
     * @param mapping The ActionMapping used to select this instance
     * @param actionForm The optional ActionForm bean for this request (if any)
     * @param request The HTTP request we are processing
     * @param response The HTTP response we are creating
     *
     * @exception IOException if an input/output error occurs
     * @exception ServletException if a servlet exception occurs
     */
    public ActionForward execute(ActionMapping mapping,
                                 ActionForm form,
                                 HttpServletRequest request,
                                 HttpServletResponse response)
                                 throws IOException, ServletException {
        HttpSession session;
 String company =null;
        try {
            session = request.getSession();
            loginData user = (loginData) session.getAttribute("login");
               TMSConfigurator tms = new TMSConfigurator(user);
            company = tms.getCompany(user);
           // Traer los valores para desplegar la lista de organizaciones disponibles.
           // Constituye un listado completo y para ello nos valemos del broker.                                              
           // Y por ultimo lo agregramos al contexto
           request.setAttribute("list", this.getListing("login","ASC",user.getId_account()));               


            // forward to display the list
           return (mapping.findForward("listing"));               

         }
          catch (Exception e)  {              
            servlet.log("[ERROR] Action at final catch: " + e.getMessage());
            e.printStackTrace();

        }
        request.setAttribute("company",company);
        // Default if everthing else fails
        return (mapping.findForward("listing"));
    }
    
    // Retorna la lista de organizaciones 
    private ArrayList getListing(String sortCol, String sortOrder,int accountId) {
        Iterator e;        
        // Se obtiene el iterador sobre todos los elementos de la lista.
        
        if (sortCol.equals("")) 
            e = broker.getList(accountId);
        else
            e = broker.getList(sortCol, sortOrder,accountId);

        // Debemos convertir el iterador en un arraylist.
        ArrayList lista = new ArrayList();
        while (e.hasNext()) {
           lista.add(e.next());
        }
               
        return lista;
    }
    
}
