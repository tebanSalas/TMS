/*
 * Generated by Flecha Roja Technologies Auto Generator
 *
 * Created on January 9, 2003, 11:31 AM
 */
package com.unify.webcenter.action;

import java.io.IOException;
import java.util.*;
import java.util.logging.*;

import javax.servlet.*;
import javax.servlet.http.*;

import org.apache.struts.action.*;
import org.apache.commons.beanutils.*;

import com.unify.webcenter.data.*;
import com.unify.webcenter.broker.*;
import com.unify.webcenter.form.*;
import com.unify.webcenter.conf.TMSConfigurator;
import java.util.ArrayList;

/**
 * <p>This action works with both JSP and Velocity templates.
 * The type of template to be used is defined in the Struts configuration
 * file.</p>
 *
 * <p>The action support an <i>action</i> URL parameter. This URL parameter
 * controls what this action class does. The following values are supported:</p>
 * <ul>
 *   <li>save    Save the record
 *   <li>delete	 Delete the record
 *   <li>edit    Edit the record
 *   <li>show	 Show the record
 * </ul>
 *
 *
 * @author Administrator 
 */
public class teamsAction extends Action {

    private static Logger logger = Logger.getLogger("com.unify");

    /** Creates a new instance of calendarAction */
    public teamsAction() {

    }

    /**
     * Handle server requests.
     *
     * @param mapping The ActionMapping used to select this instance
     * @param actionForm The optional ActionForm bean for this request (if any)
     * @param request The HTTP request we are processing
     * @param response The HTTP response we are creating
     *
     * @exception IOException if an input/output error occurs
     * @exception ServletException if a servlet exception occurs
     */
    public ActionForward execute(ActionMapping mapping,
            ActionForm form,
            HttpServletRequest request,
            HttpServletResponse response)
            throws IOException, ServletException {
        String action;
        HttpSession session;
        teamsBroker brokerTeam;
        membersBroker memBroker;
        projectsBroker projBroker;
        String company = null;

        session = request.getSession(false);
        // Si la sesion es nula, se debe redireccionar al login.
        if (session == null || session.getAttribute("login") == null) {

            // forward to display the home page
            return (mapping.findForward("login"));

        } else {
            brokerTeam = new teamsBroker();
            projBroker = new projectsBroker();
            memBroker = new membersBroker();
            try {
                session = request.getSession();

                if (form == null) {
                    System.out.println(" Creating new teamsForm bean under key " + mapping.getAttribute());
                    form = new teamsForm();
                }

                teamsForm thisForm = (teamsForm) form;

                // fetch action from form
                action = ((teamsForm) form).getOperation();

                ActionErrors errors = new ActionErrors();
                servlet.log("[DEBUG] teamsAction at perform(): Action is " + action);

                // Se obtiene la referencia al loginData dentro de la session.
                loginData user = (loginData) session.getAttribute("login");
                TMSConfigurator tms = new TMSConfigurator(user);
                company = tms.getCompany(user);
                // Se agrega al contexto la informacion del usuario
                request.setAttribute("userInfo", user);
 // Se guarda el id del usuario conectado.
                        request.setAttribute("connectedUser", "" + user.getid());
                if (action.equals("add") || action.equals("sort") || action.equals("paging")) {
                    // En el caso de la operacion add, se despliega el formulario.
                    thisForm.setOperation("applyAdd");
                    thisForm.setid(0);

                    int currentPage = thisForm.getpage();

                    // Si se trata de un sort, SIEMPRE se pasa a la pagina 1     
                    if (thisForm.getOperation().equalsIgnoreCase("sort")) {
                        // Es un sort. Siempre se pasa a la pagina 1
                        currentPage = 1;
                        thisForm.setpage(1);
                    }

                    projectsData projectData = new projectsData();
                    projectData = (projectsData) projBroker.getData(thisForm.getprojects(), user.getId_account());

                    //Si es un proyecto papa se traen todos los miembros que no estan ahora asociados
                    // a este proyecto.
                    Iterator e = null;
                    if (projectData.getProject_id() == 0) {
                        e = brokerTeam.getListByNotInProject(thisForm.getsortColumn(),
                                thisForm.getsortOrder(),
                                thisForm.getprojects(), currentPage, user.getId_account());
                    } else {
                        e = brokerTeam.getListMembersInProject(thisForm.getsortColumn(),
                                thisForm.getsortOrder(),
                                projectData.getProject_id(), currentPage, user.getId_account(), projectData.getid());
                    }
                    // Debemos convertir el iterador en un arraylist.
                    ArrayList lista = new ArrayList();
                    while (e.hasNext()) {
                        lista.add(e.next());
                    }

                    // Se retorna la lista definitiva
                    request.setAttribute("list", lista);

                    // Se setea el total de paginas
                    setPages(brokerTeam, request, "listPages");

                    if (action.equals("sort")) {
                        // Negamos el tipo de ordenamiento
                        if (thisForm.getsortOrder().equalsIgnoreCase("ASC")) {
                            thisForm.setsortOrder("DESC");
                        } else {
                            thisForm.setsortOrder("ASC");
                        }
                    }

                    // Se extra el dato del proyecto al que pertenece.
                    projectsData projData = (projectsData) projBroker.getData(thisForm.getprojects(), user.getId_account());

                    // Se agrega el link para el menu con la ruta
                    request.setAttribute("menuRoute",
                            "<a href='./home.do'>" + java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("header.displayStart") + "</a>&nbsp;/" +
                            "<a href='./projects.do?operation=view&id=" +
                            projData.getid() + "'>" +
                            projData.getname() + "</a>&nbsp;/" +
                            "<a href='./projects.do?operation=view&id=" +
                            projData.getid() + "'>" +
                            java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("common.teamMembers") + "</a>&nbsp;/" +
                            "&nbsp;" +
                            java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("common.addTeam"));


                    request.setAttribute("company", company);
                    // Se despliega el formulario de add
                    return (mapping.findForward("displayAddForm"));

                } else if (action.equals("delete")) {
                    // Tomamos el bean correspondiente a este objeto a fin
                    // de proceder con su borrado

                    // get the string with ids separate by "," character, and split in array os strings
                    String[] fields = (request.getParameter("checkedTeams") + ",").split(",");
                    ArrayList items = brokerTeam.getItems(fields, user.getId_account());

                    session.setAttribute("checkedItems", request.getParameter("checkedTeams"));
                    request.setAttribute("items", items);
                    request.setAttribute("title", java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("common.Team.name"));
                    request.setAttribute("do", request.getRequestURI());
                    request.setAttribute("company", company);
                    // forward to display the list
                    return (mapping.findForward("confirmDelete"));

                } else if (action.equals("applyDelete")) {
                    // Tomamos el bean correspondiente a este objeto a fin
                    // de proceder con su borrado
                    String[] fields = (session.getAttribute("checkedItems") + ",").split(",");
                    String lista = "";
                    for (int i = 0; i < fields.length; i++) {
                        lista += fields[i] + " - ";
                    }
                    ArrayList items = brokerTeam.getItems(fields, user.getId_account());

                    // Se procede con el borrado de cada una de ellas.
                    teamsData dataDelete = new teamsData();
                    projectsData proyData = new projectsData();
                    ArrayList left = new ArrayList();
                    int proy = 0;
                    for (int i = 0; i < items.size(); i++) {
                        dataDelete = (teamsData) items.get(i);
                        Iterator e = projBroker.getListSubProj(dataDelete.getprojects(), dataDelete.getId_account());
                        boolean ismember = false;
                        boolean isowner = false;
                        proy=dataDelete.getprojects();
                        if (e.hasNext()) {
                            while (e.hasNext() && !ismember && !isowner) {
                             
                                proyData = (projectsData) e.next();
                                ismember = brokerTeam.isMember(proyData.getid(), dataDelete.getmembers(), proyData.getId_account());
                                if (ismember) {                              
                                    errors.add("ownerconflict", new ActionError("errors.cannotDeleteMemberSubproy.wrong", dataDelete.getparentMember().getname()));
                                    saveErrors(request, errors);
                                    left.add(dataDelete);
                                } else {                                 
                                    isowner = projBroker.isOwner(dataDelete.getmembers(), dataDelete.getprojects(), dataDelete.getId_account());
                                    if (isowner) {
                                        errors.add("ownerconflict", new ActionError("errors.cannotDeleteMemberOwner.wrong", dataDelete.getparentMember().getname()));
                                        saveErrors(request, errors);
                                        left.add(dataDelete);
                                    }
                                }
                            }
                        } else {                       
                            isowner = projBroker.isOwner(dataDelete.getmembers(), dataDelete.getprojects(), dataDelete.getId_account());
                            if (isowner) {
                                errors.add("ownerconflict", new ActionError("errors.cannotDeleteMemberOwner.wrong", dataDelete.getparentMember().getname()));
                                saveErrors(request, errors);
                                left.add(dataDelete);
                            }
                        }
                        if (!ismember && !isowner) // We delete the object in the DBMS
                        {
                            brokerTeam.delete(dataDelete);
                        }
                    }
                    request.setAttribute("company", company);
                    // forward to display the list
                    if (!errors.isEmpty()) {
                        request.setAttribute("items", left);
                        request.setAttribute("title", java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("common.Team.name"));
                        session.setAttribute("projectTeam", String.valueOf(proy));
                         request.setAttribute("do", request.getRequestURI());
                        return (mapping.findForward("listingWithErrors"));

                    } else {
                        if (session.getAttribute("projectTeam") != null) {
                            session.removeAttribute("projectTeam");
                        }
                        if (session.getAttribute("checkedItems") != null) {
                            session.removeAttribute("checkedItems");
                        }
                        
                        return (new ActionForward(mapping.findForward("listing").
                                getPath() + "?operation=view&id=" + dataDelete.getprojects()));
                    }



                } else if (action.equals("applyAdd")) {
                    String[] fields = (request.getParameter("checkedItems") + ",").split(",");
                    String lista = "";
                    for (int i = 0; i < fields.length; i++) {
                        lista += fields[i] + " - ";
                    }
                    ArrayList items = memBroker.getItems(fields, user.getId_account());

                    // Se procede con el borrado de cada una de ellas.
                    teamsData dataNew;
                    membersData dataMember;

                    // Se toma el id del proyecto
                    int idProject = Integer.parseInt(request.getParameter("projects"));

                    // Y para cada member se procede con su insercion.
                    for (int i = 0; i < items.size(); i++) {
                        dataMember = (membersData) items.get(i);

                        dataNew = new teamsData();
                        dataNew.setid(0);
                        dataNew.setauthorized("0");
                        dataNew.setpublished("0");
                        dataNew.setprojects(idProject);
                        dataNew.setmembers(dataMember.getid());
                        dataNew.setId_account(user.getId_account());
                        // We delete the object in the DBMS
                        brokerTeam.add(dataNew);
                    }
                    request.setAttribute("company", company);
                    // forward to display the list
                    return (new ActionForward(mapping.findForward("listing").
                            getPath() + "?operation=view&id=" + idProject));

                } else if (action.equals("addToSite")) {
                    // Tomamos el bean correspondiente a este objeto a fin
                    // de proceder con su borrado
                    String[] fields = (request.getParameter("checkedTeams") + ",").split(",");
                    String lista = "";
                    for (int i = 0; i < fields.length; i++) {
                        lista += fields[i] + " - ";
                    }

                    ArrayList items = brokerTeam.getItems(fields, user.getId_account());

                    // Se procede con el add de cada una de ellas.
                    teamsData data = new teamsData();
                    for (int i = 0; i < items.size(); i++) {
                        data = (teamsData) items.get(i);

                        data.setpublished("1");
                        data.setauthorized("1");

                        // We delete the object in the DBMS
                        brokerTeam.update(data);
                    }

                    request.setAttribute("company", company);
                    System.out.println(mapping.findForward("listing").
                            getPath() + "?operation=view&id=" + data.getprojects());
                    // forward to display the list
                    return (new ActionForward(mapping.findForward("listing").
                            getPath() + "?operation=view&id=" + data.getprojects()));

                } else if (action.equals("removeFromSite")) {
                    // Tomamos el bean correspondiente a este objeto a fin
                    // de proceder con su borrado
                    String[] fields = (request.getParameter("checkedTeams") + ",").split(",");
                    String lista = "";
                    for (int i = 0; i < fields.length; i++) {
                        lista += fields[i] + " - ";
                    }
                    ArrayList items = brokerTeam.getItems(fields, user.getId_account());

                    // Se procede con el add de cada una de ellas.
                    teamsData data = new teamsData();
                    for (int i = 0; i < items.size(); i++) {
                        data = (teamsData) items.get(i);

                        data.setpublished("0");

                        // We delete the object in the DBMS
                        brokerTeam.update(data);
                    }
                    request.setAttribute("company", company);
                    // forward to display the list
                    return (new ActionForward(mapping.findForward("listing").
                            getPath() + "?operation=view&id=" + data.getprojects()));

                } else if (action.equals("view") || action.equals("edit")) {
                    request.setAttribute("company", company);
                    // Se hace un redirect a members

                    System.out.println(mapping.findForward("viewMember").
                            getPath() + "?operation=" + action + "&id=" +
                            thisForm.getid());
                    return (new ActionForward(mapping.findForward("viewMember").
                            getPath() + "?operation=" + action + "&id=" +
                            thisForm.getid()+"&page=projectTeam&project="+thisForm.getprojects()));

                } else if (action.equals("showAll") || action.equals("sortAll")) {
                    // Se trata de un showAll o un sortAll
                    Iterator e = brokerTeam.getListByProject(thisForm.getsortColumn(),
                            thisForm.getsortOrder(),
                            thisForm.getprojects(),
                            0, user.getId_account());

                    // Debemos convertir el iterador en un arraylist.
                    ArrayList lista = new ArrayList();
                    while (e.hasNext()) {
                        lista.add(e.next());
                    }

                    request.setAttribute("list_teams", lista);


                    if (thisForm.getOperation().equalsIgnoreCase("sortAll")) {
                        // Negamos el tipo de ordenamiento
                        if (thisForm.getsortOrder().equalsIgnoreCase("ASC")) {
                            thisForm.setsortOrder("DESC");
                        } else {
                            thisForm.setsortOrder("ASC");
                        }
                    }

                    // Se extra el dato del proyecto al que pertenece.
                    projectsData projData = (projectsData) projBroker.getData(thisForm.getprojects(), user.getId_account());

                    // Se agrega el link para el menu con la ruta
                    request.setAttribute("menuRoute",
                            "<a href='./home.do'>" + java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("header.displayStart") + "</a>&nbsp;/" +
                            "<a href='./projects.do?operation=view&id=" +
                            projData.getid() + "'>" +
                            projData.getname() + "</a>&nbsp;/" +
                            java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("common.allTeams"));
                    request.setAttribute("company", company);
                    // se regresa la lista
                    return (mapping.findForward("displayAllTeams"));
                } else if (action.equals("cancel")) {
                    System.out.println("acaa");
                    System.out.println(thisForm.getprojects());
                    request.setAttribute("company", company);
                    // forward to display the list
                    return (new ActionForward(mapping.findForward("listing").
                            getPath() + "?operation=view&id=" + session.getAttribute("projectTeam")));
                }

            } catch (Exception e) {
                servlet.log("[ERROR] Action at final catch: " + e.getMessage());
                logger.logp(Level.SEVERE, "teams.do", "perform",
                        "Fatal Error: " + e.toString());

                e.printStackTrace();

            } finally {
                // Se cierran los brokers
                brokerTeam.close();
                projBroker.close();
                memBroker.close();
            }
        }
        request.setAttribute("company", company);
        // Default if everthing else fails
        return (mapping.findForward("listing"));
    }

    // Metodo que se encarga de dejar en el context una lista de todas las paginas
    // necesarias para dar cabida a los datos del ultimo comando de sql ejecutado.
    private void setPages(MainBroker broker, HttpServletRequest request,
            String listName) {
        // Se guarda el total de pàginas en el contexto.
        ArrayList listaPages = new ArrayList();

        // Se obtiene el total de registros reales de la ultima consulta.
        int max = broker.getCount().intValue();
        int totalPage = max / broker.GAP_SIZE;
        if ((max % MainBroker.GAP_SIZE) > 0) {
            totalPage++;
        }

        for (int i = 1; i <= totalPage; i++) {
            listaPages.add(new Integer(i));
        }

        request.setAttribute(listName, listaPages);
    }
}
