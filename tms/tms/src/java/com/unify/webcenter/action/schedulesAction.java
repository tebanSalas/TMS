/*
 * Generated by Flecha Roja Technologies Auto Generator
 *
 * Created on January 9, 2003, 11:31 AM
 */
package com.unify.webcenter.action;

import java.io.IOException;
import java.util.*;
import java.util.logging.*;

import javax.servlet.*;
import javax.servlet.http.*;

import org.apache.struts.action.*;
import org.apache.commons.beanutils.*;

import com.unify.webcenter.data.*;
import com.unify.webcenter.broker.*;
import com.unify.webcenter.form.*;
import com.unify.webcenter.tools.*;

import com.unify.webcenter.conf.TMSConfigurator;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.ArrayList;

/**
 * <p>This action works with both JSP and Velocity templates.
 * The type of template to be used is defined in the Struts configuration
 * file.</p>
 *
 * <p>The action support an <i>action</i> URL parameter. This URL parameter
 * controls what this action class does. The following values are supported:</p>
 * <ul>
 *   <li>save    Save the record
 *   <li>delete	 Delete the record
 *   <li>edit    Edit the record
 *   <li>show	 Show the record
 * </ul>
 *
 *
 * @author Administrator 
 */
public class schedulesAction extends Action {

    private static Logger logger = Logger.getLogger("com.unify");

    /** Creates a new instance of calendarAction */
    public schedulesAction() {

    }

    /**
     * Handle server requests.
     *
     * @param mapping The ActionMapping used to select this instance
     * @param actionForm The optional ActionForm bean for this request (if any)
     * @param request The HTTP request we are processing
     * @param response The HTTP response we are creating
     *
     * @exception IOException if an input/output error occurs
     * @exception ServletException if a servlet exception occurs
     */
    public ActionForward execute(ActionMapping mapping,
            ActionForm form,
            HttpServletRequest request,
            HttpServletResponse response)
            throws IOException, ServletException {

        String action;
        HttpSession session;
        //Variables de los Brokers
        schedulesBroker broker;
        tasksBroker brokerTasks;
        projectsBroker brokerProjects;
        membersBroker memberBroker;
        schedulesLogBroker schLogBroker;
        tasksStatusLogBroker brokerTaskStatusLog;
        session = request.getSession(false);
        String company = null;
        //

        // Si la sesion es nula, se debe redireccionar al login.
        if (session == null || session.getAttribute("login") == null) {
            request.setAttribute("company", company);
            // forward to display the home page
            return (mapping.findForward("login"));
        } else {
            
             //Set the selected tab 
            session.setAttribute("current","schedules");
            //Inicializacion de los Brokers
            broker = new schedulesBroker();
            brokerTasks = new tasksBroker();
            brokerProjects = new projectsBroker();
            memberBroker = new membersBroker();
            brokerTaskStatusLog= new tasksStatusLogBroker();
            schLogBroker= new  schedulesLogBroker();
            //
            try {
                //session = request.getSession(false);

                // Se obtiene la referencia al loginData dentro de la session.
                loginData user = (loginData) session.getAttribute("login");
                
                TMSConfigurator tms = new TMSConfigurator(user);
                //Inicializa la compañia con la que se tenga en el archivo config
                company = tms.getCompany(user);
                
                request.setAttribute("company", company);
                // Si la sesion es nula, se debe redireccionar al login.
                if (session == null || session.isNew() ||
                        session.getAttribute("login") == null) {
                    // forward to display the home page
                    memberBroker.close();
                    broker.close();
                    brokerTasks.close();
                    brokerProjects.close();

                    request.setAttribute("company", company);
                    return (mapping.findForward("login"));

                } else {
                    // Ya hay una sesion establecida.
                    ActionErrors errors = new ActionErrors();


                    // Se agrega al contexto la informacion del usuario
                    request.setAttribute("userInfo", user);
                    request.setAttribute("menuRoute",
                            "<a href='./home.do'>" + java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("header.displayStart") + "</a>&nbsp;/&nbsp;" +
                            java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("common.schedules"));


                    if (form == null) {
                        System.out.println(" Creating new schedulesForm bean under key " + mapping.getAttribute());
                        form = new schedulesForm();
                    }

                    schedulesForm thisForm = (schedulesForm) form;

                    // fetch action from form
                    action = ((schedulesForm) form).getOperation();
                    servlet.log("[DEBUG] schedulesAction at perform(): Action is " + action);

                    // Get the star and end hour from the project of the task.
                    int start = 0; // O is 1 am, 1 is 2:00 am an so on
                    //////////////////////////////////////////////////////
                    int format = 1;   // 0 by hours, 1  every 5 minutes
                    int sizeFormat = 288;
                    /////////////////////////////////////////////////////
                    WebCalendar webcalendar = null;
                    if (action.equals("goTo")) {
                        // Se trata de al dia en cuestion

                        Calendar date = Calendar.getInstance();
                        date.setTimeInMillis(thisForm.getTheDate());

                        // Se crea el calendario
                        webcalendar = new WebCalendar(date);
                        webcalendar.setLocate(user.getlanguage());

                        // Se resetea al valor anterior
                        date.setTimeInMillis(thisForm.getTheDate());

                        // Se procesa cada dia.
                        ArrayList dias = webcalendar.getDays();

                        // Se guarda el id del proyecto
                        int proj_id;

                        ArrayList content;
                        WebDay day;

                        projectsData data = new projectsData();
                        calendarData calData = new calendarData();
                        tasksData taskData = new tasksData();

     
                        //Informacion el nombre el usuario
                        request.setAttribute("username", ((membersData) memberBroker.getData(thisForm.getuserid(), user.getId_account())).getname());

                        Calendar datevalue = Calendar.getInstance();

                        for (int i = 0; i < dias.size(); i++) {
                            day = (WebDay) dias.get(i);

                            // Ahora se procede a determinar si hay eventos para esa fecha del
                            // usuario actual.
                            content = broker.getListByDate("hour_start", "ASC",
                                    thisForm.getuserid(), day.getThisDay(), user.getId_account());

                            if (content.size() > 0) {
                                ArrayList content_ = new ArrayList();
                                schedulesData scheduleData = new schedulesData();
                                for (int j = 0; j < content.size(); j++) {
                                    scheduleData = (schedulesData) content.get(j);
                                    if (String.valueOf(scheduleData.getRealtime_minutes()).length() == 1) {
                                        scheduleData.setAuxRealtimeMinutes("0" + scheduleData.getRealtime_minutes());
                                    } else {
                                        scheduleData.setAuxRealtimeMinutes(String.valueOf(scheduleData.getRealtime_minutes()));
                                    }
                                    content_.add(scheduleData);
                                }

                                day.setEvents(true);
                                // Si se trata del mismo dia que estamos viendo
                                if ((day.getThisDay().get(Calendar.DAY_OF_YEAR) == date.get(Calendar.DAY_OF_YEAR)) &&
                                        (day.getThisDay().get(Calendar.YEAR) == date.get(Calendar.YEAR))) {
                                    request.setAttribute("appointments", content_);
                                }
                            }
                            
                          
                        }
                        
                        // Se dispone el calendario en la pagina
                        request.setAttribute("calendar", webcalendar);
                        request.setAttribute("company", company);

                        broker.close();
                        return (mapping.findForward("displaySchedule"));
                        
                    }else if (action.equals("edit")) {
                       schedulesData schData= new schedulesData();

                        // Tomamos el bean correspondiente a este objeto a fin
                        // de proceder con su borrado
                        // get the string with ids separate by "," character, and split in array os strings
                       ArrayList listTasks = new ArrayList();
                        HashMap hash = new HashMap();
                       String[] fields = (request.getParameter("checkedItems") + ",").split(",");
                        Calendar fecha = Calendar.getInstance();
                        fecha.setTimeInMillis(thisForm.getTheDate());
                        java.text.DateFormat df = java.text.DateFormat.getDateInstance(java.text.DateFormat.MEDIUM);

                        Iterator e= brokerTasks.getListByMemberFilteredForSchedule(user.getid(), user.getId_account());

                         tasksData task = new tasksData();
                        while (e.hasNext()) {
                            task = new tasksData();
                            task = (tasksData) e.next();
                            if (task.getstatus()!= 1)
                            {
                            listTasks.add(task);
                            hash.put("" + task.getid(), "");
                            }
                        }
                       schData= (schedulesData) broker.getData(user.getid(),df.format(fecha.getTime()).replace('/', '-'),Integer.parseInt(fields[0]), user.getId_account());
                       //listTasks.add(schData.getparentTask());

                            // 0= Finalizada Cliente
                            // 1= Finalizada
                            // 2= No Iniciada
                            // 3= Iniciada
                            // 4= Suspendida
                            // 5= Cotización
                            // 6= Cotización Enviada
                            // 7= Cotización Rechazada
                            // 8= Cotización Aceptada
                            // 9= Cobro
                            // 10= Enviada a Cobro
                            // 11= Cobro Procesado
                            // 12= Rejected
                            // 13= QA
                            // 14= Stand By
                       
                            int [] flag= new int[10];
                            flag[0]= 1; //Finalizada
                            flag[1]= 4; //Suspendida
                            flag[2]= 5; //Cotización
                            flag[3]= 6; //Cotización Enviada
                            flag[4]= 7; //Cotización Rechazada
                            flag[5]= 9; //Cobro
                            flag[6]= 10;//Enviada a Cobro
                            flag[7]= 11;//Cobro Procesado
                            flag[8]= 0; //Finalizada Cliente
                            flag[9]= 14; //Stand By

                            boolean iserror= false;
                            for(int j=0; j<flag.length; j++){
                                if (schData.getparentTask().getstatus()== flag[j]){
                                    iserror=true;
                                }
                            }
                            broker.close();
                          if (iserror){
                                    errors.add("HourConflict",
                                    new ActionError("errors.schedule.ConflictSched"));
                         
                                    saveErrors(request, errors);
                            request.setAttribute("company", company);
                            return (new ActionForward(mapping.findForward("displayAddFormError").
                                    getPath() + "?operation=goTo&theDate=" + thisForm.getTheDate() +
                                    "&userid=" + thisForm.getuserid() +
                                    "&username=" + request.getParameter("username")));
                           }

                        request.setAttribute("checkedItems", request.getParameter("checkedItems"));
                        request.setAttribute("date", df.format(fecha.getTime()));
                        thisForm.setTheDate(fecha.getTimeInMillis());
                        thisForm.sethourid(Integer.parseInt(fields[0]));

                        // Se agrega al contexto
                        request.setAttribute("listTasks", listTasks);
                        request.setAttribute("comments", schData.getcomments());
                        request.setAttribute("selectedTask", ""+schData.gettaskid());
                        request.setAttribute("username", ((membersData) memberBroker.getData(thisForm.getuserid(), user.getId_account())).getname());
                        request.setAttribute("title",
                                java.util.ResourceBundle.getBundle("ApplicationResources",
                                new Locale(user.getlanguage(), "")).getString("common.schedules"));
                        request.setAttribute("do", request.getRequestURI());
                        request.setAttribute("company", company);
                        // forward to display the list
                        return (mapping.findForward("displayUpdateForm"));

                    }else if (action.equals("applyEdit")){
                        Calendar fecha = Calendar.getInstance();
                        fecha.setTimeInMillis(thisForm.getTheDate());
                        java.text.DateFormat df = java.text.DateFormat.getDateInstance(java.text.DateFormat.MEDIUM);

                        schedulesData schData= (schedulesData) broker.getData(user.getid(),df.format(fecha.getTime()).replace('/', '-'),thisForm.gethourid(), user.getId_account());
                        
                        int oldTask= schData.gettaskid();
                        schData.setcomments(thisForm.getcomments());
                        /* Se cambia el codigo de tarea*/
                        schData.settaskid(thisForm.gettaskid());


                        broker.update(schData);
                       // broker.close();
                       if (oldTask != thisForm.gettaskid()){
                       /* Actualiza los tiempos de la Tarea Anterior */
                            tasksData tdnew = new tasksData();

                            tdnew = (tasksData) brokerTasks.getData(oldTask, user.getId_account());

                            String hour = String.valueOf(broker.getTotalTaskRealHours(oldTask, user.getId_account()));

                            BigDecimal totHour = new BigDecimal(hour);

                            String min = String.valueOf(broker.getTotalTaskRealMinutes(oldTask, user.getId_account()));

                            if (min.length() == 1) {
                                min = "0" + min;
                            }
                            BigDecimal totMin = new BigDecimal(min);

                            String[] split_min = null;
                            String replace_min = "";
                            boolean band = false;
                            while (!band) {
                                if (totMin.compareTo(new BigDecimal("59")) == 1) {
                                    totMin = totMin.divide(new BigDecimal(60), 2, BigDecimal.ROUND_UP);
                                    replace_min = totMin.toString().replace('.', ',');
                                    split_min = replace_min.split(",");
                                    totHour = totHour.add(new BigDecimal(split_min[0]));
                                    totMin = new BigDecimal("0." + split_min[1]);
                                    totMin = totMin.multiply(new BigDecimal("60"));

                                } else {
                                    band = true;
                                }
                            }
                            replace_min = totMin.toString().replace('.', ',');
                            split_min = replace_min.split(",");
                            if (split_min.length > 0) {
                                totMin = new BigDecimal(split_min[0]);
                            }
                            tdnew.setactual_time(new BigDecimal(totHour.toString() + "." + totMin.toString()));

                            brokerTasks.update(tdnew);

                       /* Actualiza los tiempos de la Tarea Nueva */
                                    tdnew = new tasksData();
                                    tdnew = (tasksData) brokerTasks.getData(schData.gettaskid(), user.getId_account());
                                    hour = String.valueOf(broker.getTotalTaskRealHours(tdnew.getid(), user.getId_account()));
                                    min = String.valueOf(broker.getTotalTaskRealMinutes(tdnew.getid(), user.getId_account()));

                                    totHour = new BigDecimal(hour);
                                    totMin = new BigDecimal(min);

                                    split_min = null;
                                    replace_min = "";
                                    band = false;
                                    while (!band) {
                                        if (totMin.compareTo(new BigDecimal("59")) == 1) {
                                            totMin = totMin.divide(new BigDecimal(60), 2, BigDecimal.ROUND_UP);
                                            replace_min = totMin.toString().replace('.', ',');
                                            split_min = replace_min.split(",");
                                            totHour = totHour.add(new BigDecimal(split_min[0]));
                                            totMin = new BigDecimal("0." + split_min[1]);
                                            totMin = totMin.multiply(new BigDecimal("60"));

                                        } else {
                                            band = true;
                                        }
                                    }

                                    replace_min = totMin.toString().replace('.', ',');
                                    split_min = replace_min.split(",");
                                    if (split_min.length > 0) {
                                        totMin = new BigDecimal(split_min[0]);
                                    }



                                    if (totMin.toString().length() == 1) {
                                     tdnew.setactual_time(new BigDecimal(totHour.toString() + ".0" + totMin.toString()));
                                    }else
                                        tdnew.setactual_time(new BigDecimal(totHour.toString() + "." + totMin.toString()));
                                    
                                    /*Si el estado de la nueva tarea es No Iniciada, le cambia el estado a Iniciada*/
                                    if (tdnew.getstatus() == 2)
                                        tdnew.setstatus(3);
                                    
                                    System.out.println("despues del if");
                                    System.out.println( tdnew.getactual_time());
                                    brokerTasks.update(tdnew);
                         }
                        brokerTasks.close();
                        broker.close();
                        
                        // Formateamos la fecha de forma apropiada para nuestros
                                // intereses
                                String year = "" + fecha.get(Calendar.YEAR);
                                String month = "" + (fecha.get(Calendar.MONTH) + 1);
                                String day = "" + fecha.get(Calendar.DAY_OF_MONTH);

                                if (month.length() == 1) {
                                    month = "0" + month;
                                }
                                if (day.length() == 1) {
                                    day = "0" + day;
                                }

                                String date = year + "-" + month + "-" + day;
                                String horaInicio = schData.getHour_start();
                                String horaFinal = schData.getHour_end();
                                
                          schedulesLogData schLogData = new schedulesLogData();
                                    schLogData.setId_account(user.getId_account());
                                        schLogData.setMember(user.getid());
                                        schLogData.setNew_comment(thisForm.getcomments());
                                        schLogData.setTask(thisForm.gettaskid());
                                        schLogData.setNew_date(date+" "+horaInicio+"/"+horaFinal);
                                        schLogData.setCreated(new Timestamp(fecha.getTimeInMillis()));
                                        
                                       schLogData.setStatus(2);
                                     schLogBroker.add(schLogData);
                                     
                        request.setAttribute("company", company);
                                    // Se regresa al listado del horario.
                                    return (new ActionForward(mapping.findForward("toDate").
                                            getPath() + "?operation=goTo&theDate=" + thisForm.getTheDate() +
                                            "&userid=" + thisForm.getuserid() +
                                            "&username=" + request.getParameter("username")));
                    }
                    else if (action.equals("addEvent") || action.equals("search") || action.equals("loadHour") || action.equals("loadEndHour")) {
                        // Se trata de agregar una nueva entrada a un horario.
                        // Se guarda en el contexto la fecha de hoy debidamente
                        // formateada
                        Calendar fecha = Calendar.getInstance();
                        fecha.setTimeInMillis(thisForm.getTheDate());
                        java.text.DateFormat df = java.text.DateFormat.getDateInstance(java.text.DateFormat.MEDIUM);
                        // Se agrega al contexto
                        request.setAttribute("date", df.format(fecha.getTime()));

                        Iterator lbm;
                        ArrayList lista = new ArrayList();
                        HashMap hash = new HashMap();
                        tasksData tarea;
                        // Se extrae la lista de tareas de un miembro y se almacenada en el contexto
                        if (!action.equals("addEvent")) {
                          
                            if (thisForm.getSearchTask().equals("")) {
                                thisForm.setSearchTask("%");
                            }
                            if (thisForm.getSearchCode().equals("")) {
                                thisForm.setSearchCode("%");
                            }

                            //lbm = brokerTasks.getTaskbySearch(thisForm.getSearchProject(), thisForm.getSearchTask(), thisForm.getSearchCode(), user.getid(), user.getId_account());
                            lbm = brokerTasks.getTaskbySearch1(thisForm.getSearchProject(), thisForm.getSearchTask(), thisForm.getSearchCode(), user.getid(), user.getId_account());
                            
                            request.setAttribute("task", thisForm.getSearchTask());
                            request.setAttribute("code", thisForm.getSearchCode());
                            request.setAttribute("selectedProject", thisForm.getSearchProject());
                            if (action.equals("loadEndHour")) {
                                String horaInicio = (String) request.getParameter("hour_start");
                                String horaFinal = thisForm.getHour_end();
                                String result = broker.getRegisteredHour(scheduleFormat.hour(format, Integer.parseInt(horaInicio)), scheduleFormat.hour(format, Integer.parseInt(horaFinal)));
                                String realHour = result;
                                result = "";
                                result = broker.getRegisteredMinutes(scheduleFormat.hour(format, Integer.parseInt(horaInicio)), scheduleFormat.hour(format, Integer.parseInt(horaFinal)));
                                String realMinutes = result;
                                if (realMinutes.length() == 1) {
                                    realMinutes = "0" + realMinutes;
                                }
                                //Correccion para App Server antiguos INI
                              /*  if (Integer.parseInt(realMinutes) < 0){
                                    realMinutes= String.valueOf(60 + Integer.parseInt(realMinutes));
                                }
                                if (thisForm.getHour_end().equals("287")){
                                    System.out.println("Entro por aquí: "+ Integer.parseInt(realMinutes)+ " horas "+Integer.parseInt(realHour));
                                        if (Integer.parseInt(realMinutes)==0)
                                            realHour= String.valueOf(1 + Integer.parseInt(realHour));
                                }*/
                                /*    if (Integer.parseInt(realHour) >= 1 && Integer.parseInt(realMinutes)>0)
                                        realHour= String.valueOf(1 + Integer.parseInt(realHour));
                                }*/
                                // FIN
                                request.setAttribute("realHour", realHour + ":" + realMinutes);
                            } else {
                                request.setAttribute("realHour", "0:05");
                            }
                            
                        } else {
                         //   lbm = brokerTasks.getListByMemberFilteredForSchedule(user.getid(), user.getId_account());
                            lbm = brokerTasks.getListByMemberFilteredForSchedules1(user.getid(), user.getId_account());
                            request.setAttribute("task", "%");
                            request.setAttribute("code", "%");
                            if (request.getAttribute("realHour") == null) {
                                request.setAttribute("realHour", "0:05");
                            }
                            
                        }
                        // Debemos convertir el iterador en un arraylist.
                        // Guardamos las llaves en un hash para facilitar el paso 2 que se da
                        // cuando se realiza un update de un horario
                        while (lbm.hasNext()) {
                            tarea = new tasksData();
                            tarea = (tasksData) lbm.next();
                            if (tarea.getstatus()!= 1)
                            {
                            lista.add(tarea);
                            hash.put("" + tarea.getid(), "");
                            }
                        }
                        
                        //request.setAttribute("tasks", lista);
                        // Formateamos la fecha de forma apropiada para nuestros
                        // intereses
                        String year = "" + fecha.get(Calendar.YEAR);
                        String month = "" + (fecha.get(Calendar.MONTH) + 1);
                        String day = "" + fecha.get(Calendar.DAY_OF_MONTH);
                        if (month.length() == 1) {
                            month = "0" + month;
                        }
                        if (day.length() == 1) {
                            day = "0" + day;
                        }

                        /*String date = year + "-" + month + "-" + day;
                        // Traemos los horarios que estan actualmente registrados para este usuario
                        // en esta fecha dada.
                        schedulesData schd = new schedulesData();
                        Iterator e = broker.getList(user.getid(), date, user.getId_account());
                        ArrayList oneday = new ArrayList();
                        while (e.hasNext()) {
                            schd = (schedulesData) e.next();
                            oneday.add(schd);
                            // Aqui se debe considerar el caso en el cual una tarea YA GRABADA en el horario,
                            // no esta en el set de tareas validas. Caso que sucede -por ejemplo- cuando 
                            // se cierra una tarea o bien se le traslada.
                            if (schd.gettaskid() > 0 &&
                                    hash.containsKey("" + schd.gettaskid()) == false) {
                                lista.add(schd.getparentTask());
                                hash.put("" + schd.gettaskid(), "");
                            }

                        }
                        // Eliminamos el contenido del hash
                        hash = null;*/
                        // Se guarda la lista de tareas en el contexto
                        request.setAttribute("listTasks", lista);
                        Hashtable hashProjects = new Hashtable();
                        ArrayList projectsList = new ArrayList();
                        //brokerProjects.getMembersByProject(String.valueOf(user.getid()), brokerProjects, hashProjects, user.getId_account());
                        brokerProjects.getMembersByProject1(String.valueOf(user.getid()), hashProjects, user.getId_account());
                       /* Iterator col = hashProjects.values().iterator();
                        while (col.hasNext()) {
                            
                            projectsList.add(col.next());
                        }
                        Collections.sort(projectsList);*/
                         brokerProjects.getMembersByProject2(String.valueOf(user.getid()), projectsList, user.getId_account());
                        request.setAttribute("projectsList", projectsList);
                        request.setAttribute("username", ((membersData) memberBroker.getData(thisForm.getuserid(), user.getId_account())).getname());

                        ArrayList hourStart = new ArrayList();
                        ArrayList hourEnd = new ArrayList();
                        hourData hoursData = new hourData();
                        for (int i = start; i < sizeFormat - 1; i++) {
                            hoursData = new hourData();
                            hoursData.setId(i);
                            hoursData.setName(scheduleFormat.hour(format, i));
                            hourStart.add(hoursData);
                        }

                        if (action.equals("loadHour") || action.equals("loadEndHour")) {
                            request.setAttribute("selectedTimeS", request.getParameter("hour_start"));
                            request.setAttribute("selectedTask", String.valueOf(thisForm.gettaskid()));
                            request.setAttribute("comments", thisForm.getcomments());
                            if (action.equals("loadEndHour")) {
                                request.setAttribute("selectedTimeE", request.getParameter("hour_end"));
                            }
                            //Assign the initial time and final time                                
                            for (int i = Integer.parseInt(request.getParameter("hour_start")) + 1; i < sizeFormat; i++) {
                                hoursData = new hourData();
                                hoursData.setId(i);
                                hoursData.setName(scheduleFormat.hour(format, i));
                                hourEnd.add(hoursData);
                            }
                        } else {
                            //Assign the initial time and final time
                            for (int i = start + 1; i < sizeFormat; i++) {
                                hoursData = new hourData();
                                hoursData.setId(i);
                                hoursData.setName(scheduleFormat.hour(format, i));
                                hourEnd.add(hoursData);
                            }
                        }
                        request.setAttribute("hourStart", hourStart);
                        request.setAttribute("hourEnd", hourEnd);
                        request.setAttribute("registeredTime", "0");
                        //request.setAttribute("member", " ");
                        request.setAttribute("member", request.getParameter("member"));

                        request.setAttribute("id", "0");
                        // Se trata de agregar una nueva entrada al calendario
                        thisForm.setOperation("applyAdd");
                        request.setAttribute("company", company);
                        broker.close();
                        return (mapping.findForward("displayAddForm"));

                    } else if (action.equals("applyAdd")) {

                        // Se trata de la operacion de guardar un horario.
                        errors = thisForm.validate(mapping, request);

                        if (thisForm.gettaskid() != 0) {
                            if (errors.isEmpty()) {
                                Calendar fecha = Calendar.getInstance();
                                fecha.setTimeInMillis(thisForm.getTheDate());

                                // Formateamos la fecha de forma apropiada para nuestros
                                // intereses
                                String year = "" + fecha.get(Calendar.YEAR);
                                String month = "" + (fecha.get(Calendar.MONTH) + 1);
                                String day = "" + fecha.get(Calendar.DAY_OF_MONTH);

                                if (month.length() == 1) {
                                    month = "0" + month;
                                }
                                if (day.length() == 1) {
                                    day = "0" + day;
                                }

                                String date = year + "-" + month + "-" + day;

                                // Tomamos la hora de inicio y la hora de finalizacion
                                // para cada incremente de horas entre ellas, se crea
                                // un registro en la tabla de horarios.
                                String horaInicio = scheduleFormat.hour(format, Integer.parseInt((String) request.getParameter("hour_start")));
                                String horaFinal = scheduleFormat.hour(format, Integer.parseInt((String) request.getParameter("hour_end")));
                                
                                if (broker.isConflict(thisForm.getuserid(), horaInicio, horaFinal, date, user.getId_account())) {

                                    request.setAttribute("task", thisForm.getSearchTask());
                                    request.setAttribute("code", thisForm.getSearchCode());
                                    request.setAttribute("selectedProject", thisForm.getSearchProject());
                                    request.setAttribute("selectedTimeS", request.getParameter("hour_start"));
                                    request.setAttribute("selectedTask", String.valueOf(thisForm.gettaskid()));
                                    request.setAttribute("comments", thisForm.getcomments());
                                    request.setAttribute("selectedTimeE", request.getParameter("hour_end"));

                                    horaInicio = (String) request.getParameter("hour_start");

                                    horaFinal = thisForm.getHour_end();
                                    String result = broker.getRegisteredHour(scheduleFormat.hour(format, Integer.parseInt(horaInicio)), scheduleFormat.hour(format, Integer.parseInt(horaFinal)));
                                    String realHour = result;

                                    result = "";
                                    result = broker.getRegisteredMinutes(scheduleFormat.hour(format, Integer.parseInt(horaInicio)), scheduleFormat.hour(format, Integer.parseInt(horaFinal)));
                                    String realMinutes = result;

                                    request.setAttribute("realHour", realHour + ":" + realMinutes);
                                    errors.add("HourConflict",
                                            new ActionError("errors.schedule.ConflictWithSchedule"));
                                    saveErrors(request, errors);
                                    request.setAttribute("company", company);

                                    broker.close();
                                    return (new ActionForward(mapping.findForward("displayAddFormError").
                                            getPath() + "?operation=addEvent&theDate=" + thisForm.getTheDate() +
                                            "&userid=" + thisForm.getuserid() +
                                            "&username=" + request.getParameter("username")));
                                } else {
                                    // No hay conflicto de horas.
                                    schedulesData last = new schedulesData();
                                    tasksData taskData = new tasksData();
                                    tasksStatusLogData tskl= new tasksStatusLogData();
                                    taskData = (tasksData) brokerTasks.getData(thisForm.gettaskid(), user.getId_account());
                                    if (taskData.getstatus() == 2) {
                                        taskData.setstatus(3);
                                        brokerTasks.update(taskData);

                                        //Se actualiza la bitacora
                                        tskl.setTask(taskData.getid());
                                        tskl.setCreated(new Timestamp(Calendar.getInstance().getTimeInMillis()));
                                        tskl.setId_account(taskData.getId_account());
                                        tskl.setMember(user.getid());
                                        tskl.setStatus(3);

                                        brokerTaskStatusLog.add(tskl);
                                    }
                                    
                                    schedulesLogData schLogData = new schedulesLogData();
                                    schLogData.setId_account(user.getId_account());
                                        schLogData.setMember(user.getid());
                                        schLogData.setNew_comment(thisForm.getcomments());
                                        schLogData.setTask(thisForm.gettaskid());
                                        schLogData.setNew_date(date+" "+horaInicio+"/"+horaFinal);
                                        schLogData.setCreated(new Timestamp(Calendar.getInstance().getTimeInMillis()));
                                        
                                       schLogData.setStatus(1);
                                     schLogBroker.add(schLogData);
                                    // Se actualiza con los datos apropiados de tarea y demas
                                    last.setuserid(thisForm.getuserid());
                                    last.setdate(date);
                                    last.settaskid(thisForm.gettaskid());
                                    last.setcomments(thisForm.getcomments());
                                    last.setlast_update(new java.sql.Timestamp(Calendar.getInstance().getTimeInMillis()));
                                    last.setHour_start(horaInicio);
                                    last.setHour_end(horaFinal);
                                    last.sethourid(0);
                                    last.setId_account(user.getId_account());
                                    String result = broker.getRegisteredHour(horaInicio, horaFinal);
                                    last.setRealtime_hours(Integer.parseInt(result));
                                    result = "";
                                    result = broker.getRegisteredMinutes(horaInicio, horaFinal);
                                    if (result.length() == 1) {
                                        result = "0" + result;

                                    }
                                    last.setRealtime_minutes(Integer.parseInt(result));
                                    // Se guarda en la base de datos.
                                    try{
                                    broker.add(last);
                                    }catch(Exception e){
                                        System.out.println("EXCEPTION! "+ e.getMessage());
                                        if (taskData.getstatus()!=2){
                                        request.setAttribute("task", thisForm.getSearchTask());
                                       request.setAttribute("code", thisForm.getSearchCode());
                                       request.setAttribute("selectedProject", thisForm.getSearchProject());
                                       request.setAttribute("selectedTimeS", request.getParameter("hour_start"));
                                       request.setAttribute("selectedTask", String.valueOf(thisForm.gettaskid()));
                                       request.setAttribute("comments", thisForm.getcomments());
                                       request.setAttribute("selectedTimeE", request.getParameter("hour_end"));

                                       horaInicio = (String) request.getParameter("hour_start");

                                       horaFinal = thisForm.getHour_end();
                                       result = broker.getRegisteredHour(scheduleFormat.hour(format, Integer.parseInt(horaInicio)), scheduleFormat.hour(format, Integer.parseInt(horaFinal)));
                                       String realHour = result;

                                       result = "";
                                       result = broker.getRegisteredMinutes(scheduleFormat.hour(format, Integer.parseInt(horaInicio)), scheduleFormat.hour(format, Integer.parseInt(horaFinal)));
                                       String realMinutes = result;

                                       request.setAttribute("realHour", realHour + ":" + realMinutes);
                                       errors.add("HourConflict",
                                               new ActionError("errors.schedule.ConflictWithSchedule"));
                                       saveErrors(request, errors);
                                       request.setAttribute("company", company);

                                       broker.close();
                                       return (new ActionForward(mapping.findForward("displayAddFormError").
                                               getPath() + "?operation=addEvent&theDate=" + thisForm.getTheDate() +
                                               "&userid=" + thisForm.getuserid() +
                                               "&username=" + request.getParameter("username")));
                                    }
                                    }
                                    // Se debe de actualizar el tiempo invertido por esa tarea
                                    tasksData tdnew = new tasksData();
                                    tdnew = (tasksData) brokerTasks.getData(last.gettaskid(), user.getId_account());
                                    String hour = String.valueOf(broker.getTotalTaskRealHours(last.gettaskid(), user.getId_account()));
                                    String min = String.valueOf(broker.getTotalTaskRealMinutes(last.gettaskid(), user.getId_account()));

                                    BigDecimal totHour = new BigDecimal(hour);
                                    BigDecimal totMin = new BigDecimal(min);

                                    String[] split_min = null;
                                    String replace_min = "";
                                    boolean band = false;
                                    while (!band) {
                                        if (totMin.compareTo(new BigDecimal("59")) == 1) {
                                            totMin = totMin.divide(new BigDecimal(60), 2, BigDecimal.ROUND_UP);
                                            replace_min = totMin.toString().replace('.', ',');
                                            split_min = replace_min.split(",");
                                            totHour = totHour.add(new BigDecimal(split_min[0]));
                                            totMin = new BigDecimal("0." + split_min[1]);
                                            totMin = totMin.multiply(new BigDecimal("60"));

                                        } else {
                                            band = true;
                                        }
                                    }

                                    replace_min = totMin.toString().replace('.', ',');
                                    split_min = replace_min.split(",");
                                    if (split_min.length > 0) {
                                        totMin = new BigDecimal(split_min[0]);
                                    }


                                    
                                    if (totMin.toString().length() == 1) {
                                     tdnew.setactual_time(new BigDecimal(totHour.toString() + ".0" + totMin.toString()));
                                    }else
                                        tdnew.setactual_time(new BigDecimal(totHour.toString() + "." + totMin.toString()));
                                    System.out.println("despues del if");
                                    System.out.println( tdnew.getactual_time());
                                 
                                    
                                    brokerTasks.update(tdnew);
                                    request.setAttribute("company", company);

                                    broker.close();
                                    // Se regresa al listado del horario.
                                    return (new ActionForward(mapping.findForward("toDate").
                                            getPath() + "?operation=goTo&theDate=" + thisForm.getTheDate() +
                                            "&userid=" + thisForm.getuserid() +
                                            "&username=" + request.getParameter("username")));
                                }
                            } else {
                                // Se detecto un error de validacion, se retorna
                                saveErrors(request, errors);
                                request.setAttribute("company", company);
                                return (new ActionForward(mapping.findForward("displayAddForm").
                                        getPath() + "?operation=add"));

                            }
                        } else {
                            // Se detecto un error de validacion, se retorna
                            request.setAttribute("company", company);
                            request.setAttribute("username", ((membersData) memberBroker.getData(thisForm.getuserid(), user.getId_account())).getname());
                            Calendar fecha = Calendar.getInstance();
                            fecha.setTimeInMillis(thisForm.getTheDate());
                            java.text.DateFormat df = java.text.DateFormat.getDateInstance(java.text.DateFormat.MEDIUM);
                            // Se agrega al contexto
                            request.setAttribute("date", df.format(fecha.getTime()));
                            request.setAttribute("task", thisForm.getSearchTask());
                            request.setAttribute("code", thisForm.getSearchCode());
                            request.setAttribute("selectedProject", thisForm.getSearchProject());
                            request.setAttribute("selectedTimeS", request.getParameter("hour_start"));
                            request.setAttribute("selectedTask", String.valueOf(thisForm.gettaskid()));
                            request.setAttribute("comments", thisForm.getcomments());
                            request.setAttribute("selectedTimeE", request.getParameter("hour_end"));
                            String horaInicio = null;
                            String horaFinal = null;

                            horaInicio = (String) request.getParameter("hour_start");

                            horaFinal = thisForm.getHour_end();

                            String result = broker.getRegisteredHour(scheduleFormat.hour(format, Integer.parseInt(horaInicio)), scheduleFormat.hour(format, Integer.parseInt(horaFinal)));
                            String realHour = result;

                            result = "";
                            result = broker.getRegisteredMinutes(scheduleFormat.hour(format, Integer.parseInt(horaInicio)), scheduleFormat.hour(format, Integer.parseInt(horaFinal)));
                            String realMinutes = result;

                            request.setAttribute("realHour", realHour + ":" + realMinutes);

                            return (new ActionForward(mapping.findForward("displayAddFormError").
                                    getPath() + "?operation=addEvent&theDate=" + thisForm.getTheDate() +
                                    "&userid=" + thisForm.getuserid() +
                                    "&username=" + request.getParameter("username")));
                        }

                    } else if (action.equals("delete")) {
                        // Tomamos el bean correspondiente a este objeto a fin
                        // de proceder con su borrado

                        // get the string with ids separate by "," character, and split in array os strings
                        String[] fields = (request.getParameter("checkedItems") + ",").split(",");
                        Calendar date = Calendar.getInstance();
                        date.setTimeInMillis(thisForm.getTheDate());
                        ArrayList items = broker.getItems(fields, thisForm.getuserid(), date, user.getId_account());

                        request.setAttribute("username", ((membersData) memberBroker.getData(thisForm.getuserid(), user.getId_account())).getname());
                        request.setAttribute("userid", "" + thisForm.getuserid());
                        request.setAttribute("theDate", "" + thisForm.getTheDate());

                        request.setAttribute("checkedItems", request.getParameter("checkedItems"));
                        request.setAttribute("items", items);
                        request.setAttribute("fromPage", "" + thisForm.getTheDate());
                        request.setAttribute("title", java.util.ResourceBundle.getBundle("ApplicationResources",
                                new Locale(user.getlanguage(), "")).getString("common.Event"));
                        request.setAttribute("do", request.getRequestURI());
                        request.setAttribute("company", company);
                        
                  
            
                       // int[] tasks= thisForm.gettask();
                        tasksData tData= new tasksData();
                        schedulesData schedData = new schedulesData();
                        
                        tasksBroker tBroker= new tasksBroker();
                        
                        for (int i = 0 ; i<fields.length; i++){
                            schedData = new schedulesData();
                            
                            schedData =(schedulesData) items.get(i);
                            
                            
                            tData= new tasksData();
                            tData=(tasksData) schedData.getparentTask();
                            
                            // 0= Finalizada Cliente
                            // 1= Finalizada
                            // 2= No Iniciada
                            // 3= Iniciada
                            // 4= Suspendida
                            // 5= Cotización
                            // 6= Cotización Enviada
                            // 7= Cotización Rechazada
                            // 8= Cotización Aceptada
                            // 9= Cobro
                            // 10= Enviada a Cobro
                            // 11= Cobro Procesado
                            // 12= Rejected
                            // 13= QA
                            // 14= Stand By
                            
                            int [] flag= new int[10];
                            flag[0]= 1;
                            flag[1]= 4;
                            flag[2]= 5;
                            flag[3]= 6;
                            flag[4]= 7;
                            flag[5]= 9;
                            flag[6]= 10;
                            flag[7]= 11;
                            flag[8]= 14;
                            flag[9]= 0;
                                
                            boolean iserror= false;
                            for(int j=0; j<flag.length; j++){
                                if (tData.getstatus()== flag[j]){
                                    iserror=true;
                                }
                            }
                          if (iserror){
                            tBroker.close();
                                    errors.add("HourConflict",
                                    new ActionError("errors.schedule.ConflictTask"));

                                    saveErrors(request, errors);
                            request.setAttribute("company", company);                                                                                                                                                                                                                                       
                            return (new ActionForward(mapping.findForward("displayAddFormError").
                                    getPath() + "?operation=goTo&theDate=" + thisForm.getTheDate() +
                                    "&userid=" + thisForm.getuserid() +
                                    "&username=" + request.getParameter("username")));
                           }
                                
                          
                        }
                        tBroker.close();
                        // forward to display the list 
                        return (mapping.findForward("confirmDelete"));

                    } else if (action.equals("applyDelete")) {
                        // Tomamos el bean correspondiente a este objeto a fin
                        // de proceder con su borrado                    
                        String[] fields = (request.getParameter("checkedItems") + ",").split(",");


                        String lista = "";
                        for (int i = 0; i < fields.length; i++) {
                            lista += fields[i] + " - ";
                        }
                        Calendar date = Calendar.getInstance();
                        date.setTimeInMillis(Long.parseLong(request.getParameter("theDate")));
                        int userid = Integer.parseInt(request.getParameter("userid"));

                        ArrayList items = broker.getItems(fields, userid, date, user.getId_account());

                        // Se procede con el borrado de cada una de ellas.
                        schedulesData dataDelete;
                        String oldStart, oldEnd, oldDate;
                        int oldHour, oldTask;
                        for (int i = 0; i < items.size(); i++) {
                            dataDelete = (schedulesData) items.get(i);
                            int taskId = dataDelete.gettaskid();
                        String horaInicio = dataDelete.getHour_start();
                        String horaFinal = dataDelete.getHour_end();
                        
                         schedulesLogData schLogData = new schedulesLogData();
                        schLogData.setId_account(user.getId_account());
                            schLogData.setMember(user.getid());
                            schLogData.setNew_comment(dataDelete.getcomments());
                            schLogData.setTask(dataDelete.gettaskid());
                            schLogData.setStatus(0);
                            schLogData.setNew_date(dataDelete.getdate()+" "+horaInicio+"/"+horaFinal);
                            schLogData.setCreated(new Timestamp(date.getTimeInMillis()));
                            schLogBroker.add(schLogData);
                            
                            // We delete the object in the DBMS
                            broker.delete(dataDelete);
                            
                                      
                                
                       
                            
                            tasksData tdnew = new tasksData();
                            tdnew = (tasksData) brokerTasks.getData(dataDelete.gettaskid(), user.getId_account());
                                
                            String hour = String.valueOf(broker.getTotalTaskRealHours(taskId, user.getId_account()));

                            BigDecimal totHour = new BigDecimal(hour);

                            String min = String.valueOf(broker.getTotalTaskRealMinutes(taskId, user.getId_account()));

                            if (min.length() == 1) {
                                min = "0" + min;
                            }
                            BigDecimal totMin = new BigDecimal(min);

                            String[] split_min = null;
                            String replace_min = "";
                            boolean band = false;
                            while (!band) {
                                if (totMin.compareTo(new BigDecimal("59")) == 1) {
                                    totMin = totMin.divide(new BigDecimal(60), 2, BigDecimal.ROUND_UP);
                                    replace_min = totMin.toString().replace('.', ',');
                                    split_min = replace_min.split(",");
                                    totHour = totHour.add(new BigDecimal(split_min[0]));
                                    totMin = new BigDecimal("0." + split_min[1]);
                                    totMin = totMin.multiply(new BigDecimal("60"));

                                } else {
                                    band = true;
                                }
                            }
                            replace_min = totMin.toString().replace('.', ',');
                            split_min = replace_min.split(",");
                            if (split_min.length > 0) {
                                totMin = new BigDecimal(split_min[0]);
                            }
                            tdnew.setactual_time(new BigDecimal(totHour.toString() + "." + totMin.toString()));
                            
                            
                            brokerTasks.update(tdnew);


                        }

                       
                      

                        request.setAttribute("username", ((membersData) memberBroker.getData(userid, user.getId_account())).getname());
                        request.setAttribute("company", company);
                        return (new ActionForward(mapping.findForward("toDate").
                                getPath() + "?operation=goTo&userId=" + userid +
                                "&theDate=" + request.getParameter("fromPage") +
                                "&username=" + request.getParameter("username")));


                    }
                    // Determine what to do
                    if (action == null || action.equals("listing") || action.equals("sort")) {
                        // Traer los valores para desplegar la lista de organizaciones disponibles.
                        // Constituye un listado completo y para ello nos valemos del broker.                                              
                        // Y por ultimo lo agregramos al contexto
                        Iterator e = broker.getListByDate(thisForm.getsortColumn(),
                                thisForm.getsortOrder(),
                                0, thisForm.getuserid(), user.getId_account());

                        // Debemos convertir el iterador en un arraylist.
                        ArrayList lista = new ArrayList();
                        while (e.hasNext()) {
                            lista.add(e.next());
                        }


                        membersData dataMem = (membersData) memberBroker.getData(thisForm.getuserid(), user.getId_account());
                        // Se coloca en el contexto, el nombre del usuario.
                        request.setAttribute("memberName", dataMem.getname());

                        // Se agrega la lista al contexto
                        request.setAttribute("list", lista);

                        // Negamos el tipo de ordenamiento
                      /*  if (thisForm.getsortOrder().equalsIgnoreCase("ASC")) {
                        thisForm.setsortOrder("DESC");
                        } else {
                        thisForm.setsortOrder("ASC");
                        }*/
                        request.setAttribute("company", company);
                        return (mapping.findForward("listingAll"));

                    } else if (action.equals("listingByProject") || action.equals("sortByProject")) {
                        // Traer los valores para desplegar la lista de organizaciones disponibles.
                        // Constituye un listado completo y para ello nos valemos del broker.                                              
                        // Y por ultimo lo agregramos al contexto
                        int projectId = Integer.parseInt(request.getParameter("project"));
                        request.setAttribute("project", "" + projectId);

                        // Se pone el header del proyecto

                        projectsData projData = (projectsData) brokerProjects.getData(projectId, user.getId_account());
                        request.setAttribute("projectName", projData.getname());

                        Iterator e = broker.getListByProject(thisForm.getsortColumn(),
                                thisForm.getsortOrder(),
                                thisForm.getuserid(), projectId, user.getId_account());


                        // Debemos convertir el iterador en un arraylist.
                        ArrayList lista = new ArrayList();
                        while (e.hasNext()) {
                            lista.add(e.next());
                        }



                        membersData dataMem = (membersData) memberBroker.getData(thisForm.getuserid(), user.getId_account());
                        // Se coloca en el contexto, el nombre del usuario.
                        request.setAttribute("memberName", dataMem.getname());

                        // Se agrega la lista al contexto
                        request.setAttribute("list", lista);

                        // Negamos el tipo de ordenamiento
                        if (thisForm.getsortOrder().equalsIgnoreCase("ASC")) {
                            thisForm.setsortOrder("DESC");
                        } else {
                            thisForm.setsortOrder("ASC");
                        }
                        request.setAttribute("company", company);
                        return (mapping.findForward("listingAllByProject"));

                    } else if (action.equals("view")) {

                        String date = thisForm.getdate();

                        java.text.SimpleDateFormat df = new java.text.SimpleDateFormat("yyyy-MM-dd");
                        Date dt = df.parse(date);

                        Calendar calendar = Calendar.getInstance();
                        calendar.setTime(dt);
                        thisForm.setYear("" + calendar.get(calendar.YEAR));
                        thisForm.setMonth("" + (calendar.get(calendar.MONTH) + 1));
                        thisForm.setDay("" + calendar.get(calendar.DAY_OF_MONTH));

                        //System.out.println("Fecha: "+date);

                        schedulesData schd = new schedulesData();
                        Iterator e;
                        if (thisForm.getuserid() == 0) {
                            e = broker.getList(user.getid(), date, user.getId_account());
                        } else {
                            e = broker.getList(thisForm.getuserid(), date, user.getId_account());
                        }

                        ArrayList oneday = new ArrayList();
                        while (e.hasNext()) {
                            oneday.add(e.next());
                        }

                        request.setAttribute("oneday", oneday);
                        thisForm.setOperation("view");
                        request.setAttribute("company", company);
                        return (mapping.findForward("displayViewForm"));

                    } else if (action.equals("viewByProject")) {
                        // Es ell view de un schedules desde el view del project.
                        String date = thisForm.getdate();
                        int projectId = Integer.parseInt(request.getParameter("project"));

                        // Se pone el header del proyecto

                        projectsData projData = (projectsData) brokerProjects.getData(projectId, user.getId_account());

                        request.setAttribute("projectName", projData.getname());

                        request.setAttribute("project", "" + projectId);

                        java.text.SimpleDateFormat df = new java.text.SimpleDateFormat("yyyy-MM-dd");
                        Date dt = df.parse(date);

                        Calendar calendar = Calendar.getInstance();
                        calendar.setTime(dt);
                        thisForm.setYear("" + calendar.get(calendar.YEAR));
                        thisForm.setMonth("" + (calendar.get(calendar.MONTH) + 1));
                        thisForm.setDay("" + calendar.get(calendar.DAY_OF_MONTH));

                        Iterator e = broker.getList(thisForm.getuserid(), date, user.getId_account());
                        ArrayList oneday = new ArrayList();

                        schedulesData scheduleData = new schedulesData();
                        BigDecimal real_hours = new BigDecimal("0");
                        ArrayList tasks = new ArrayList();
                        BigDecimal totHour = new BigDecimal("0");
                        String hour = null;
                        BigDecimal totMin = new BigDecimal("0");
                        String min = null;
                        while (e.hasNext()) {
                            scheduleData = new schedulesData();
                            scheduleData = (schedulesData) e.next();
                            System.out.println("antes del if");
                            System.out.println(scheduleData.gettaskid());
                            if (!tasks.contains(new Integer(scheduleData.gettaskid()))) {
                                System.out.println("despues del if");
                                System.out.println(scheduleData.gettaskid());
                                hour = String.valueOf(broker.getTotalTaskRealHoursbyDate(scheduleData.gettaskid(), scheduleData.getuserid(), scheduleData.getdate(), scheduleData.getId_account()));
                                System.out.println(hour);
                                totHour = totHour.add(new BigDecimal(hour));
                                System.out.println(totHour);
                                System.out.println(scheduleData.getuserid());
                                System.out.println(scheduleData.getdate());
                                System.out.println(scheduleData.getId_account());
                                min = String.valueOf(broker.getTotalTaskRealMinutesbyDate(scheduleData.gettaskid(), scheduleData.getuserid(), scheduleData.getdate(), scheduleData.getId_account()));
                                System.out.println(min);
                                if (min.length() == 1) {
                                    min = "0" + min;
                                }
                                totMin = totMin.add(new BigDecimal(min));
                                System.out.println(totMin);
                                tasks.add(new Integer(scheduleData.gettaskid()));
                            }
                            oneday.add(scheduleData);
                        }
                        System.out.println("salio");
                        String[] split_min = null;
                        String replace_min = "";
                        boolean band = false;
                        while (!band) {
                            if (totMin.compareTo(new BigDecimal("59")) == 1) {
                                System.out.println("entro");
                                totMin = totMin.divide(new BigDecimal(60), 2, BigDecimal.ROUND_UP);
                                replace_min = totMin.toString().replace('.', ',');
                                split_min = replace_min.split(",");

                                totHour = totHour.add(new BigDecimal(split_min[0]));
                                totMin = new BigDecimal("0." + split_min[1]);
                                totMin = totMin.multiply(new BigDecimal("60"));
                                System.out.println(totMin);
                                if (totMin.toString().replace('.', ',').split(",").length > 1) {
                                    replace_min = totMin.toString().replace('.', ',');
                                    split_min = replace_min.split(",");
                                    totMin = new BigDecimal(split_min[0]);
                                }
                            } else {
                                band = true;
                            }
                        }
                        System.out.println("final");

                        real_hours = new BigDecimal(totHour + "." + totMin);
                        System.out.println(real_hours);

                        String replaceRealHours = real_hours.toString().replace('.', ':');
                        request.setAttribute("real_hours", replaceRealHours);
                        request.setAttribute("oneday", oneday);
                        thisForm.setOperation("view");

                        membersData dataMem = (membersData) memberBroker.getData(thisForm.getuserid(), user.getId_account());
                        // Se coloca en el contexto, el nombre del usuario.
                        request.setAttribute("memberName", dataMem.getname());
                        request.setAttribute("company", company);
                        return (mapping.findForward("displayViewByProject"));

                    } else if (action.equals("delete")) {
                        // Tomamos el bean correspondiente a este objeto a fin
                        // de proceder con su borrado
                        // get the string with ids separate by "," character, and split in array os strings
                        String[] fields = (request.getParameter("checkedItems") + ",").split(",");

                        ArrayList items = new ArrayList();
                        for (int i = 0; i < fields.length; i++) {
                            items.add(fields[i]);
                        }


                        request.setAttribute("checkedItems", request.getParameter("checkedItems"));
                        request.setAttribute("items", items);
                        request.setAttribute("title",
                                java.util.ResourceBundle.getBundle("ApplicationResources",
                                new Locale(user.getlanguage(), "")).getString("common.schedules"));
                        request.setAttribute("do", request.getRequestURI());
                        request.setAttribute("company", company);
                        // forward to display the list
                        return (mapping.findForward("confirmDelete"));

                    } else if (action.equals("applyDelete")) {

                        // get the string with ids separate by "," character, and split in array os strings
                        String[] fields = (request.getParameter("checkedItems") + ",").split(",");
                        try {
                            for (int i = 0; i < fields.length; i++) {
                                // Se eliminan todos los horarios de ese dia.
                                System.out.println(fields[i]);
                                broker.deleteSchedule(user.getid(), fields[i], user.getId_account());
                            }
                        } catch (Exception e) {
                            System.out.println("Fatal error deleting schedule: " + e.toString());
                        }
                        request.setAttribute("company", company);
                        // forward to display the list
                        return (mapping.findForward("listing"));
                    }
                }
            } catch (Exception e) {
                servlet.log("[ERROR] Action at final catch: " + e.getMessage());
                logger.logp(Level.SEVERE, "schedules.do", "perform",
                        "Fatal Error: " + e.toString());

                e.printStackTrace();

            } finally {
                memberBroker.close();
                broker.close();
                brokerTasks.close();
                brokerProjects.close();
                brokerTaskStatusLog.close();
                schLogBroker.close();
            }
        }
        request.setAttribute("company", company);
        // Default if everthing else fails
        return (mapping.findForward("listing"));
    }

    // Retorna la lista de todos los schedules de este miembro 
  /*  private ArrayList getListing(int userId, String sortCol, String sortOrder, schedulesBroker broker) {
    Iterator e;
    // Se obtiene el iterador sobre todos los elementos de la lista.        
    e = broker.getList(sortCol, sortOrder);
    // Debemos convertir el iterador en un arraylist.
    ArrayList lista = new ArrayList();
    while (e.hasNext()) {
    lista.add(e.next());
    }
    return lista;
    }
    // Retorna la lista de organizaciones 
    private ArrayList getScheduleDay(int userid, String date, schedulesBroker broker) {
    Iterator e;
    // Se obtiene el iterador sobre todos los elementos de la lista.
    e = broker.getList(userid, date);
    // Debemos convertir el iterador en un arraylist.
    ArrayList lista = new ArrayList();
    while (e.hasNext()) {
    lista.add(e.next());
    }
    return lista;
    }*/
}
