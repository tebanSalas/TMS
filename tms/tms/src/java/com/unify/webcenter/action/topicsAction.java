/*
 * Generated by Flecha Roja Technologies Auto Generator
 *
 * Created on January 9, 2003, 11:31 AM
 */
package com.unify.webcenter.action;

import java.io.IOException;
import java.util.*;
import java.util.logging.*;

import javax.servlet.*;
import javax.servlet.http.*;

import org.apache.struts.action.*;
import org.apache.commons.beanutils.*;

import com.unify.webcenter.data.*;
import com.unify.webcenter.broker.*;
import com.unify.webcenter.form.*;
import com.unify.webcenter.conf.TMSConfigurator;
import java.sql.Timestamp;
import java.util.ArrayList;

/**
 * <p>This action works with both JSP and Velocity templates.
 * The type of template to be used is defined in the Struts configuration
 * file.</p>
 *
 * <p>The action support an <i>action</i> URL parameter. This URL parameter
 * controls what this action class does. The following values are supported:</p>
 * <ul>
 *   <li>save    Save the record
 *   <li>delete	 Delete the record
 *   <li>edit    Edit the record
 *   <li>show	 Show the record
 * </ul>
 *
 *
 * @author Administrator 
 */
public class topicsAction extends Action {

    private static Logger logger = Logger.getLogger("com.unify");

    /** Creates a new instance of calendarAction */
    public topicsAction() {

    }

    /**
     * Handle server requests.
     *
     * @param mapping The ActionMapping used to select this instance
     * @param actionForm The optional ActionForm bean for this request (if any)
     * @param request The HTTP request we are processing
     * @param response The HTTP response we are creating
     *
     * @exception IOException if an input/output error occurs
     * @exception ServletException if a servlet exception occurs
     */
    public ActionForward execute(ActionMapping mapping,
            ActionForm form,
            HttpServletRequest request,
            HttpServletResponse response)
            throws IOException, ServletException {
        String action;
        HttpSession session;
        topicsBroker broker;
        projectsBroker projectsbroker;
        postBroker postbroker;
        membersBroker memBroker;
        tasksBroker taskbroker;
        teamsBroker team;
        String company = null;

        session = request.getSession(false);
        // Si la sesion es nula, se debe redireccionar al login.
        if (session == null || session.getAttribute("login") == null) {
            
            // forward to display the home page
            String topicid = request.getParameter("id");
            if (topicid != null) {
                session = request.getSession(true);
                session.setAttribute("forwardto", "topic");
                session.setAttribute("topicid", topicid);
            }
            return (mapping.findForward("login"));

        } else {
            broker = new topicsBroker();
            projectsbroker = new projectsBroker();
            postbroker = new postBroker();
            memBroker = new membersBroker();
            taskbroker= new tasksBroker();
            team = new teamsBroker();
            try {
                // Ya hay una sesion establecida.                
                // Se obtiene la referencia al loginData dentro de la session.
                loginData user = (loginData) session.getAttribute("login");
                TMSConfigurator tms = new TMSConfigurator(user);
                company = tms.getCompany(user);

                if (form == null) {
                    System.out.println(" Creating new topicsForm bean under key " + mapping.getAttribute());
                    form = new topicsForm();
                }

                topicsForm thisForm = (topicsForm) form;

                // fetch action from form
                action = ((topicsForm) form).getOperation();

                // Se agrega al contexto la informacion del usuario
                request.setAttribute("userInfo", user);

                System.out.println("TOP:"+ action);
                servlet.log("[DEBUG] topicsAction at perform(): Action is " + action);

                // Determine what to do
                if (action == null) {
                    request.setAttribute("company", company);
                    return (mapping.findForward("home"));

                } else if (action.equals("addToSite")) {
                    // get the string with ids separate by "," character, and split in array os strings
                    String[] fields = (request.getParameter("checkedItems") + ",").split(",");
                    ArrayList items = broker.getItems(fields,user.getId_account());
                    topicsData data = new topicsData();

                    // Debido a que se puede hacer un add masivo
                    for (int i = 0; i < items.size(); i++) {
                        data = (topicsData) items.get(i);

                        data.setpublished("1");
                        broker.update(data);
                    }

                    // Si estaba publicando desde el home, se direcciona ahi, sino
                    // a la ventana del proyecto
                    if (thisForm.getfromPage().equals("home")) {
                        request.setAttribute("company", company);
                        return (mapping.findForward("home"));
                    } else {
                        request.setAttribute("company", company);
                        return (new ActionForward(mapping.findForward("viewProject").
                                getPath() + "&id=" + data.getproject(), false));
                    }

                } else if (action.equals("removeFromSite")) {
                    String[] fields = (request.getParameter("checkedItems") + ",").split(",");
                    ArrayList items = broker.getItems(fields,user.getId_account());
                    topicsData data = new topicsData();

                    // Debido a que se puede hacer un remove masivo
                    for (int i = 0; i < items.size(); i++) {
                        data = (topicsData) items.get(i);

                        data.setpublished("0");
                        broker.update(data);
                    }

                    // Si estaba publicando desde el home, se direcciona ahi, sino
                    // a la ventana del proyecto
                    if (thisForm.getfromPage().equals("home")) {
                        request.setAttribute("company", company);
                        return (mapping.findForward("home"));
                    } else {
                        request.setAttribute("company", company);
                        return (new ActionForward(mapping.findForward("viewProject").
                                getPath() + "&id=" + data.getproject(), false));
                    }

                } else if (action.equals("close")) {
                    String[] fields = (request.getParameter("checkedItems") + ",").split(",");
                    ArrayList items = broker.getItems(fields,user.getId_account());
                    topicsData data;

                    // Debido a que se puede hacer un remove masivo
                    for (int i = 0; i < items.size(); i++) {
                        data = (topicsData) items.get(i);

                        data.setstatus("0");
                        broker.update(data);
                    }

                    if (thisForm.getfromPage().equalsIgnoreCase("home")) {
                        // Si estoy en el home me regresa ahi
                        request.setAttribute("company", company);
                        return (mapping.findForward("home"));
                    } else {
                        // Si estoy en el view de un proyecto me redirecciona a
                        // ese mismo punto.
                        request.setAttribute("company", company);
                        return (new ActionForward(mapping.findForward("viewProject").
                                getPath() + "&id=" + thisForm.getproject(), false));
                    }

                } else if (action.equals("add")) {
                    // En el caso de la operacion add, se despliega el formulario.
                    // Traer el codigo del projecto al que se lengthva asignar el topic, el codigo
                    // debe de venir por parametros del form de donde se llama esta acciï¿½n.


                    int project_id = thisForm.getproject();

                    projectsData projectsdata = (projectsData) projectsbroker.getData(project_id,user.getId_account());

                    request.setAttribute("projectdata", projectsdata);

                    request.setAttribute("title", java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("common.addLabel"));
                    thisForm.setOperation("applyAdd");
                    thisForm.setproject(projectsdata.getid());
                    thisForm.setid(0);

                    // Se agrega el link para el menu con la ruta
                    request.setAttribute("menuRoute",
                            "<a href='./home.do'>" + java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("header.displayStart") + "</a>&nbsp;/" +
                            "<a href='./projects.do?operation=view&id=" +
                            projectsdata.getid() + "'>" +
                            projectsdata.getname() + "</a>&nbsp;/" +
                            "&nbsp;" +
                            java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("common.addTopic"));
                    request.setAttribute("company", company);
                    return (mapping.findForward("displayAddForm"));

                } else if (action.equals("view") || action.equals("sort") || action.equals("notify") || action.equals("notifySelected") ) {
                    // Si se trata de un view, se debe de cargar los datos del bean
                    // en el formulario.
                    topicsData data = (topicsData) broker.getData(thisForm.getid(),user.getId_account());

                    data.setlast_post(Timestamp.valueOf(data.convTimeZone(data.getlast_post(), user.getTime_zone())));
                        
                    teamsBroker teamBroker= new teamsBroker();
                    membersBroker memberBroker= new membersBroker();
                    
                    teamsData teamData = new teamsData();
                    request.setAttribute("title", java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("common.viewTopic"));

                    // We copy all the properties from the form to the bean.
                    PropertyUtils.copyProperties(thisForm, data);
                    thisForm.setOperation("view");
                    // 
                    int project_id = thisForm.getproject();
                    int task_id = data.gettasks();
                    projectsData projectsdata = (projectsData) projectsbroker.getData(project_id,user.getId_account());
                    tasksData taskdata = (tasksData) taskbroker.getData(task_id,user.getId_account());
                    // Se agrega el link para el menu con la ruta
                    request.setAttribute("menuRoute",
                            "<a href='./home.do'>" + java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("header.displayStart") + "</a>&nbsp;/" +
                            "<a href='./projects.do?operation=view&id=" +
                            projectsdata.getid() + "'>" +
                            projectsdata.getname() + "</a>&nbsp;/" +
                            "&nbsp;" +
                            java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("common.viewTopic"));

                    request.setAttribute("projectdata", projectsdata);
                    request.setAttribute("taskdata", taskdata);

                    
                    
                    // Instanciar clase para el envio de correo
                    com.unify.webcenter.tools.sendMail sm =
                            new com.unify.webcenter.tools.sendMail();
                    
                    // add new record in table post with the text message                    
                    postData postdata = new postData();
                    postdata= (postData) postbroker.getListByTopic("id","ASC", data.getid(), user.getTime_zone(), data.getId_account()).get(0);
                    
                    // Se toma el from con base en el dueï¿½o de la discusion
                    membersData from_member = (membersData) memBroker.getData(user.getid(),user.getId_account());
                    membersData to_member = null;

                    if (action.equals("notify")){
                    /*
                     *  AQUI ES SOLO PARA AVISARLE AL DUENO DEL PROYECTO, AL CREADOR Y NADIE MAS
                     */
                    projectsData dataProj =
                            (projectsData) projectsbroker.getData(data.getproject(),user.getId_account());

                    // El to es el dueno del proyecto
                    to_member = (membersData) memBroker.getData(dataProj.getowner(),user.getId_account());
                    
                    //Verifica si la notificación automàtica de correos esta activa y si el nuevo ticket ha sido notificado
                    if (dataProj.getautom_notification().equals("1")){
                        // Se envia el email al dueno del proyecto.
                        sm.sendTopics("newTopic", from_member, to_member,
                                data.getid(), postdata.getmessage(),user, data,String.valueOf(session.getAttribute("mainUrl")) );

                        if (user.getid() != to_member.getid()) {
                            // Se envia el email al creador de la tarea tambien, si y solo si
                            // no son la misma persona
                            sm.sendTopics("newTopicToCreator", from_member, from_member,
                                    data.getid(), postdata.getmessage(),user,  data,String.valueOf(session.getAttribute("mainUrl")));
                        }
                    }else if (data.getnotified().equals("0")){
                    // Se envia el email al dueno del proyecto.
                        sm.sendTopics("newTopic", from_member, to_member,
                                data.getid(), postdata.getmessage(),user, data,String.valueOf(session.getAttribute("mainUrl")) );

                        if (user.getid() != to_member.getid()) {
                            // Se envia el email al creador de la tarea tambien, si y solo si
                            // no son la misma persona
                            sm.sendTopics("newTopicToCreator", from_member, from_member,
                                    data.getid(), postdata.getmessage(),user,  data,String.valueOf(session.getAttribute("mainUrl")));
                        }
                    }
                    data.setnotified("1");
                    thisForm.setnotified("1");
                    broker.update(data);
                    }
                    
                    if (action.equals("notifySelected")){
                    
                    // get the string with ids separate by "," character, and split in array os strings
                    String[] fields = (request.getParameter("checkedItems") + ",").split(",");
                    ArrayList items = broker.getItems(fields,user.getId_account());
                    data = new topicsData();
                    
                    String listTopics= "";
                    String projName="";
                    projectsData dataProj = null;
                    // Debido a que se puede hacer un add masivo
                    for (int i = 0; i < items.size(); i++) {
                        data = (topicsData) items.get(i);
                        
                        data.setnotified("1");
                        broker.update(data);
                        dataProj =
                            (projectsData) projectsbroker.getData(data.getproject());
                        // El to es el dueno del proyecto
                            to_member = (membersData) memBroker.getData(dataProj.getowner());
                            
                            projName=dataProj.getname();
                        
                    }
                    
                         sm.sendTopicsGroup("newTopicGroup", from_member, to_member,
                                 null,user, items, projName,String.valueOf(session.getAttribute("mainUrl")) );
                         
                         request.setAttribute("company", company);
                        return (new ActionForward(mapping.findForward("viewProject").
                                getPath() + "&id=" + dataProj.getid(), false));
                    }
                    
                    // Se dispone la lista de post
                    System.out.println("13 ");
                    System.out.println("13 "+request.getParameter("idM"));
                    if (request.getParameter("idM")== null){
                        request.setAttribute("lista", postbroker.getListByTopic("created", "DESC", data.getid(),user.getTime_zone(),user.getId_account()));
                    request.setAttribute("idM", "0");
                    }else{
    
                        if (request.getParameter("idM").equals("0")){
                    request.setAttribute("lista", postbroker.getListByTopic("created", "DESC", data.getid(),user.getTime_zone(),user.getId_account()));
                    request.setAttribute("idM", "0");
                        }else{
                            int memberId= Integer.parseInt(request.getParameter("idM").toString());
                            request.setAttribute("lista", postbroker.getListByTopicMember("created", "DESC", data.getid(),user.getTime_zone(),user.getId_account(), memberId ));
                            request.setAttribute("idM", String.valueOf(memberId));
                        }
                    }
                    System.out.println("14 ");
                    // Se deben de desplegar los archivos asociados con este topico.
                    filesBroker fileBroker = new filesBroker();
                    Iterator e1 = fileBroker.getListByTopic("name",
                            "ASC",
                            data.getid(), 0,user.getId_account());
                    fileBroker.close();
                  
                    // Se agregan a la lista de archivos
                    ArrayList lista = new ArrayList();
                    filesData fileData = new filesData();
                    System.out.println("15");
                    while (e1.hasNext()) {
                        fileData = new filesData();
                        fileData=(filesData)e1.next();
                        fileData.setupload(Timestamp.valueOf(fileData.convTimeZone(fileData.getupload(), user.getTime_zone())));
                        
                        lista.add(fileData);
                    }

                    // Se dispone la lista de files
                    request.setAttribute("listFiles", lista);

                    if (action.equals("sort")) {
                        // Negamos el tipo de ordenamiento
                        if (thisForm.getsortOrder().equalsIgnoreCase("ASC")) {
                            thisForm.setsortOrder("DESC");
                        } else {
                            thisForm.setsortOrder("ASC");
                        }
                    }
                    System.out.println("16 ");
                    request.setAttribute("company", company);
                    Iterator e=teamBroker.getListByProject("members", "DESC", projectsdata.getid(), 0);
                    System.out.println("17 ");
                    ArrayList listaMiembros = new ArrayList();
                    while (e.hasNext()) {
                        teamData= (teamsData) e.next();
                        listaMiembros.add( (membersData)memberBroker.getData(teamData.getmembers()));
                    }
                           
                    System.out.println("18 ");
                    // Se dispone la lista de miembros del equipo de trabajo del proyecto
                    request.setAttribute("listaMiembros", listaMiembros);
                      if (!user.isAdmin()) {
                     
                        if (team.isMember(data.getproject(), user.getid(), user.getId_account())) {
                            
                            return (mapping.findForward("displayViewForm"));

                        } else {
                            // No hay acceso, se redirecciona a una pagina donde se le notifica
                            // de eso.
                            // Se agrega el link para el menu con la ruta
                            return (mapping.findForward("accessDenied"));
                        }
                       
                        
                    } else {
                        return (mapping.findForward("displayViewForm"));
                    }


                } else if (action.equals("delete")) {
                    // Tomamos el bean correspondiente a este objeto a fin
                    // de proceder con su borrado

                    // get the string with ids separate by "," character, and split in array os strings
                    String[] fields = (request.getParameter("checkedItems") + ",").split(",");
                    ArrayList items = broker.getItems(fields,user.getId_account());

                    String param = "";
                    if (request.getParameter("fromPage").equalsIgnoreCase("viewProject")) {
                        param = request.getParameter("project");
                    }

                    request.setAttribute("fromPage", request.getParameter("fromPage"));
                    request.setAttribute("param", "" + param);
                    request.setAttribute("checkedItems", request.getParameter("checkedItems"));
                    request.setAttribute("items", items);
                    request.setAttribute("title", java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("common.Topics.name"));
                    request.setAttribute("do", request.getRequestURI());
                    request.setAttribute("company", company);
                    // forward to display the list
                    return (mapping.findForward("confirmDelete"));

                } else if (action.equals("applyDelete")) {
                    // Tomamos el bean correspondiente a este objeto a fin
                    // de proceder con su borrado                    
                    String[] fields = (request.getParameter("checkedItems") + ",").split(",");
                    String lista = "";
                    for (int i = 0; i < fields.length; i++) {
                        lista += fields[i] + " - ";
                    }
                    ArrayList items = broker.getItems(fields,user.getId_account());

                    // Se procede con el borrado de cada una de ellas.
                    topicsData dataDelete;
                    for (int i = 0; i < items.size(); i++) {
                        dataDelete = (topicsData) items.get(i);
                        // We delete the object in the DBMS
                        broker.delete(dataDelete);
                    }

                    // if el source es home
                    if (thisForm.getfromPage().equals("home")) {
                        request.setAttribute("company", company);
                        return (mapping.findForward("home"));
                    } else {
                        
                        request.setAttribute("company", company);
                        return (new ActionForward(mapping.findForward("viewProject").
                                getPath() + "&id=" + request.getParameter("param"), false));
                    }


                } else if (action.equals("applyAdd")) {
                    // Se trata de la aplicacion de un insert en la BD
                    topicsData data = new topicsData();
                    topicsBroker topicBroker= new topicsBroker();
                    // We copy all the properties from the form to the bean.
                    PropertyUtils.copyProperties(data, thisForm);

                    // Put some values
                    data.setowner(user.getid());
                    data.setlast_post(new java.sql.Timestamp(Calendar.getInstance().getTimeInMillis()));
                    data.setstatus("1");
                    data.settotasks("0");
                    data.settasks(0);
                    data.setpublished("0");
                    data.setposts(0);
                    data.setId_account(user.getId_account());
                    
                    if (data.getnotified()==null){
                        data.setnotified("0");
                    }
                   // System.out.println("NOT: " + data.getnotified());
                    // We add the new record.
                    broker.add(data);
                    // add new record in table post with the text message                    
                    postData postdata = new postData();
                    postdata.setid(0);
                    postdata.setmember(user.getid());
                    postdata.setmessage(thisForm.getmessage());
                    postdata.setcreated(new java.sql.Timestamp(Calendar.getInstance().getTimeInMillis()));
                    postdata.settopic(data.getid());
                    postdata.setId_account(user.getId_account());
                    // add the new post record
                    postbroker.add(postdata);

                    data= (topicsData)topicBroker.getData(data.getid());
                    // Instanciar clase para el envio de correo
                    com.unify.webcenter.tools.sendMail sm =
                            new com.unify.webcenter.tools.sendMail();

                    // Se toma el from con base en el dueï¿½o de la discusion
                    membersData from_member = (membersData) memBroker.getData(user.getid(),user.getId_account());
                    membersData to_member = null;


                    /*
                     *  AQUI ES SOLO PARA AVISARLE AL DUENO DEL PROYECTO, AL CREADOR Y NADIE MAS
                     */
                    projectsData dataProj =
                            (projectsData) projectsbroker.getData(data.getproject(),user.getId_account());

                    // El to es el dueno del proyecto
                    to_member = (membersData) memBroker.getData(dataProj.getowner(),user.getId_account());
                    
                    //Verifica si la notificación automàtica de correos esta activa y si el nuevo ticket ha sido notificado
                    System.out.println(dataProj.getautom_notification() + "/" + data.getnotified());
                    System.out.println(thisForm.getnotified());
                    if (dataProj.getautom_notification().equals("1")){
                        // Se envia el email al dueno del proyecto.
                        sm.sendTopics("newTopic", from_member, to_member,
                                data.getid(), thisForm.getmessage(),user, data,String.valueOf(session.getAttribute("mainUrl")) );

                        if (user.getid() != to_member.getid()) {
                            // Se envia el email al creador de la tarea tambien, si y solo si
                            // no son la misma persona
                            sm.sendTopics("newTopicToCreator", from_member, from_member,
                                    data.getid(), thisForm.getmessage(),user,  data,String.valueOf(session.getAttribute("mainUrl")));
                        }
                        
                    }else if (thisForm.getnotified()!=null){
                       // thisForm.setnotified("1");
                        // Se envia el email al dueno del proyecto.
                        sm.sendTopics("newTopic", from_member, to_member,
                                data.getid(), thisForm.getmessage(),user, data,String.valueOf(session.getAttribute("mainUrl")) );
                                
                        if (user.getid() != to_member.getid()) {
                            // Se envia el email al creador de la tarea tambien, si y solo si
                            // no son la misma persona
                            sm.sendTopics("newTopicToCreator", from_member, from_member,
                                    data.getid(), thisForm.getmessage(),user,  data,String.valueOf(session.getAttribute("mainUrl")));
                        }
                    }

                    /*  
                     *      ESTAS LINEAS ESTABAN PARA QUE CADA MIEMBRO DEL EQUIPO SUPIERA CUANDO SE ABRIA O
                     *   RESPONDIA A UNA DISCUSION, POR RECOMENDACION AHORA SOLO LE AVISA AL DUENO DEL PROYECTO
                     *
                     *                  
                    // Se envia un email de esta nueva discusion a cada uno de los miembros 
                    // del equipo de trabajo de este proyecto
                    teamsBroker teamBroker = new teamsBroker();
                    // Se toma la lista de miembros del equipo
                    Iterator e = teamBroker.getListByProject("id", "ASC", 
                    data.getproject(), 0);
                    teamsData teamData;
                    int memberId;
                    // Para cada miembro del equipo, se envia un correo.
                    while (e.hasNext()) {
                    teamData = (teamsData) e.next();
                    // Link al miembro
                    memberId = teamData.getmembers();
                    // Se trae el dato
                    to_member = (membersData) memBroker.getData(memberId);
                    // Se envia el email.
                    sm.send("newTopic", from_member, to_member, 
                    data.getid(), thisForm.getmessage());
                    }
                    // Se cierra el broker
                    teamBroker.close();
                     
                     
                     */ 
                    int project_id = thisForm.getproject();
                    // Se dispone la lista de post
                    if (request.getParameter("idM")== null){
                        request.setAttribute("lista", postbroker.getListByTopic("created", "DESC", data.getid(),user.getTime_zone(),user.getId_account()));
                    request.setAttribute("idM", "0");
                    }else{
    
                        if (request.getParameter("idM").equals("0")){
                    request.setAttribute("lista", postbroker.getListByTopic("created", "DESC", data.getid(),user.getTime_zone(),user.getId_account()));
                    request.setAttribute("idM", "0");
                        }else{
                            int memberId= Integer.parseInt(request.getParameter("idM").toString());
                            request.setAttribute("lista", postbroker.getListByTopicMember("created", "DESC", data.getid(),user.getTime_zone(),user.getId_account(), memberId ));
                            request.setAttribute("idM", String.valueOf(memberId));
                        }
                    }
                    projectsData projectsdata = (projectsData) projectsbroker.getData(project_id,user.getId_account());
                   request.setAttribute("menuRoute",
                            "<a href='./home.do'>" + java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("header.displayStart") + "</a>&nbsp;/" +
                            "<a href='./projects.do?operation=view&id=" +
                            projectsdata.getid() + "'>" +
                            projectsdata.getname() + "</a>&nbsp;/" +
                            "&nbsp;" +
                            java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("common.viewTopic"));
                    // We copy all the properties from the form to the bean.
                    PropertyUtils.copyProperties(thisForm, data);
                    thisForm.setOperation("view");
                   request.setAttribute("lista", postbroker.getListByTopic("created", "DESC", data.getid(),user.getTime_zone(),user.getId_account()));
                     request.setAttribute("title", java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("common.viewTopic"));

                     Iterator e=team.getListByProject("members", "DESC", projectsdata.getid(), 0);
                    ArrayList listaMiembros = new ArrayList();

                    
                    teamsData teamData = new teamsData();
                    while (e.hasNext()) {
                        teamData= (teamsData) e.next();
                        listaMiembros.add( (membersData)memBroker.getData(teamData.getmembers()));
                    }
                           
                    // Se dispone la lista de miembros del equipo de trabajo del proyecto
                    request.setAttribute("listaMiembros", listaMiembros);
                    
                    request.setAttribute("projectdata", projectsdata);
                    request.setAttribute("company", company);
                    // Regresamos a la pagina del proyecto 
                    return (mapping.findForward("displayViewForm"));

                } else if (action.equals("showAll") || action.equals("sortAll")) {
                    projectsData projectdata= new projectsData();
                    // Si se trata de un showAll
                    Iterator e = broker.getListByProjectByStatus(thisForm.getsortColumn(),
                            thisForm.getsortOrder(),
                            thisForm.getproject(), 0,
                            thisForm.gettypeTopic(),user.getId_account());

                    
                    projectdata= (projectsData) projectsbroker.getData(thisForm.getproject(), user.getId_account());
                    
                    // Debemos convertir el iterador en un arraylist.
                    ArrayList lista = new ArrayList();
                    topicsData topicData = new topicsData();
                    while (e.hasNext()) {
                        topicData = (topicsData) e.next();
                        topicData.setlast_post(Timestamp.valueOf(topicData.convTimeZone(topicData.getlast_post(), user.getTime_zone())));

                        lista.add(topicData);
                    }

                    request.setAttribute("listTopics", lista);

                    if (thisForm.getOperation().equalsIgnoreCase("sortAll")) {
                        // Negamos el tipo de ordenamiento
                        if (thisForm.getsortOrder().equalsIgnoreCase("ASC")) {
                            thisForm.setsortOrder("DESC");
                        } else {
                            thisForm.setsortOrder("ASC");
                        }
                    }

                    projectsData projectMember = (projectsData) projectsbroker.getData(thisForm.getproject(),user.getId_account());

                    // Se agrega el link para el menu con la ruta
                    request.setAttribute("menuRoute",
                            "<a href='./home.do'>" + java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("header.displayStart") + "</a>&nbsp;/" +
                            "<a href='./projects.do?operation=view&id=" +
                            projectMember.getid() + "'>" +
                            projectMember.getname() + "</a>&nbsp;/" +
                            java.util.ResourceBundle.getBundle("ApplicationResources", new Locale(user.getlanguage(), "")).getString("common.allTopics"));

                    // Se guarda el id del usuario conectado.
                    request.setAttribute("connectedUser", "" + user.getid());
                    request.setAttribute("projectOwner", "" + projectMember.getowner());
                    request.setAttribute("company", company);
                    request.setAttribute("autom_notification", "" +projectdata.getautom_notification());
                    
                    return (mapping.findForward("displayAllTopics"));
                }
            } catch (Exception e) {
                servlet.log("[ERROR] Action at final catch: " + e.getMessage());
                logger.logp(Level.SEVERE, "topics.do", "perform",
                        "Fatal Error: " + e.toString());

                e.printStackTrace();

            } finally {
                broker.close();
                projectsbroker.close();
                postbroker.close();
                memBroker.close();
                team.close();
            }

        }
        request.setAttribute("company", company);
        // Default if everthing else fails
        return (mapping.findForward("home"));
    }

    // Retorna la lista de organizaciones 
    private ArrayList getListing(String sortCol, String sortOrder, topicsBroker broker,int accountId) {
        Iterator e;
        // Se obtiene el iterador sobre todos los elementos de la lista.

        if (sortCol.equals("")) {
            e = broker.getList(accountId);
        } else {
            e = broker.getList(sortCol, sortOrder,accountId);
        }

        // Debemos convertir el iterador en un arraylist.
        ArrayList lista = new ArrayList();
        while (e.hasNext()) {
            lista.add(e.next());
        }

        return lista;
    }
}
