/*
 * Generated by Flecha Roja Technologies Auto Generator
 *
 * Created on January 9, 2003, 11:31 AM
 */

package com.unify.webcenter.action;

import java.io.IOException;
import java.util.*;
import java.util.logging.*;

import javax.servlet.*;
import javax.servlet.http.*;

import org.apache.struts.action.*;
import org.apache.commons.beanutils.*;

import com.unify.webcenter.data.*;
import com.unify.webcenter.broker.*;
import com.unify.webcenter.form.*;
import com.unify.webcenter.conf.TMSConfigurator;


/**
 * <p>This action works with both JSP and Velocity templates.
 * The type of template to be used is defined in the Struts configuration
 * file.</p>
 *
 * <p>The action support an <i>action</i> URL parameter. This URL parameter
 * controls what this action class does. The following values are supported:</p>
 * <ul>
 *   <li>save    Save the record
 *   <li>delete	 Delete the record
 *   <li>edit    Edit the record
 *   <li>show	 Show the record
 * </ul>
 *
 *
 * @author Administrator 
 */

public class calendarAction extends Action {
    private calendarBroker broker;    
    private static Logger logger  = Logger.getLogger("com.unify");    
    
    /** Creates a new instance of calendarAction */
    public calendarAction() {
	broker = new calendarBroker();
    }
    
    /**
     * Handle server requests.
     *
     * @param mapping The ActionMapping used to select this instance
     * @param actionForm The optional ActionForm bean for this request (if any)
     * @param request The HTTP request we are processing
     * @param response The HTTP response we are creating
     *
     * @exception IOException if an input/output error occurs
     * @exception ServletException if a servlet exception occurs
     */
    public ActionForward execute(ActionMapping mapping,
                                 ActionForm form,
                                 HttpServletRequest request,
                                 HttpServletResponse response)
                                 throws IOException, ServletException {
        String action;
        HttpSession session;
        String company = null;
        session = request.getSession(false); 
        
        try {
                      
            
            //Set the selected tab 
            
            loginData user = (loginData) session.getAttribute("login");
            TMSConfigurator tms = new TMSConfigurator(user);
            company = tms.getCompany(user);
            request.setAttribute("company",company);
            
            if (form == null) {
                    System.out.println(" Creating new calendarForm bean under key "
                                + mapping.getAttribute());
                form = new calendarForm();
            }

            calendarForm thisForm = (calendarForm) form;

            // fetch action from form
            action = ((calendarForm) form).getOperation();

            servlet.log("[DEBUG] calendarAction at perform(): Action is " + action);
           
            // Determine what to do
            // Determine what to do
            if ( action == null || action.equals("listing") ) {
               // Traer los valores para desplegar la lista de organizaciones disponibles.
               // Constituye un listado completo y para ello nos valemos del broker.                                              
               // Y por ultimo lo agregramos al contexto
               request.setAttribute("list", this.getListing("name","ASC",user.getId_account()));               
               thisForm.setsortOrder("DESC");
               
                // forward to display the list

               return (mapping.findForward("listing"));               

            } else if ( action.equals("sort") ) {
               // Traer los valores para desplegar la lista de organizaciones disponibles.
               // Constituye un listado completo y para ello nos valemos del broker.                                              
               // Y por ultimo lo agregramos al contexto
               request.setAttribute("list", 
                    this.getListing(thisForm.getsortColumn(),
                                    thisForm.getsortOrder(),user.getId_account()));
                

               // Negamos el tipo de ordenamiento
               if (thisForm.getsortOrder().equalsIgnoreCase("ASC"))
                   thisForm.setsortOrder("DESC");
               else
                   thisForm.setsortOrder("ASC");
               
                // forward to display the list
                request.setAttribute("company",company);
               return (mapping.findForward("listing"));

            } else if (action.equals("add")) {
                // En el caso de la operacion add, se despliega el formulario.
                request.setAttribute("title","Add");
                thisForm.setOperation("applyAdd");
                thisForm.setid(0);
                 request.setAttribute("company",company);
                return (mapping.findForward("displayAddForm"));
               
            } else if (action.equals("edit")) {
                // Si se trata de un edit, se debe de cargar los datos del bean
                // en el formulario.
                calendarData data = (calendarData)broker.getData(thisForm.getid(), user.getId_account());
                
                request.setAttribute("title","Edit");
                
                // We copy all the properties from the form to the bean.
                PropertyUtils.copyProperties(thisForm, data);                
                thisForm.setOperation("applyEdit");
                 request.setAttribute("company",company);
                return (mapping.findForward("displayEditForm"));
                
            } else if (action.equals("view")) {
                // Si se trata de un view, se debe de cargar los datos del bean
                // en el formulario.
                calendarData data = (calendarData)broker.getData(thisForm.getid(), user.getId_account());
                
                request.setAttribute("title","View Client Organization");
                
                // We copy all the properties from the form to the bean.
                PropertyUtils.copyProperties(thisForm, data);                
                thisForm.setOperation("view");
                 request.setAttribute("company",company);
                return (mapping.findForward("displayViewForm"));
                
            } else if (action.equals("delete")) {
                // Tomamos el bean correspondiente a este objeto a fin
                // de proceder con su borrado
                calendarData data = (calendarData)broker.getData(thisForm.getid(), user.getId_account());
                
                // We delete the object in the DBMS
                broker.delete(data);
                
                // Y por ultimo lo agregramos al contexto para que el usuario vea
                // la lista actualizada.
		request.setAttribute("list", this.getListing("name","ASC",user.getId_account()));               
                thisForm.setsortOrder("DESC");
                
                // forward to display the list
                 request.setAttribute("company",company);
                return (mapping.findForward("listing"));                
                                
            } else if (action.equals("applyAdd")) {
                // Se trata de la aplicacion de un insert en la BD
                calendarData data = new calendarData();

                // We copy all the properties from the form to the bean.
                PropertyUtils.copyProperties(data, thisForm);                                
                data.setId_account(user.getId_account());
                // We add the new record.
                broker.add(data);
                                               
                // Y por ultimo lo agregramos al contexto para que el usuario vea
                // la lista actualizada.
		request.setAttribute("list", this.getListing("name","ASC",user.getId_account()));               
                thisForm.setsortOrder("DESC");
                
                // forward to display the list
                 request.setAttribute("company",company);
                return (mapping.findForward("listing"));                
                
            } else if (action.equals("applyEdit")) {
                // Se trata de la aplicacion de un update en la BD
                calendarData data = new calendarData();
                
                // We copy all the properties from the form to the bean.
                PropertyUtils.copyProperties(data, thisForm);                                
                
                // We add the new record.
                broker.update(data);
                
                // Y por ultimo lo agregramos al contexto para que el usuario vea
                // la lista actualizada.
		request.setAttribute("list", this.getListing("name","ASC",user.getId_account()));               
                thisForm.setsortOrder("DESC");
                
                // forward to display the list
                 request.setAttribute("company",company);
                return (mapping.findForward("listing"));                
                
            }
        }
        catch (Exception e)  {              
            servlet.log("[ERROR] Action at final catch: " + e.getMessage());
            logger.logp(Level.SEVERE, "calendar.do",  "perform", 
                        "Fatal Error: " +e.toString());                  
            
            e.printStackTrace();

        }
         request.setAttribute("company",company);
        // Default if everthing else fails
        return (mapping.findForward("listing"));
    }
    
    // Retorna la lista de organizaciones 
    private ArrayList getListing(String sortCol, String sortOrder,int accountId) {
        Iterator e;        
        // Se obtiene el iterador sobre todos los elementos de la lista.
        
        if (sortCol.equals("")) 
            e = broker.getList(accountId);
        else
            e = broker.getList(sortCol, sortOrder,accountId);

        // Debemos convertir el iterador en un arraylist.
        ArrayList lista = new ArrayList();
        while (e.hasNext()) {
           lista.add(e.next());
        }
               
        return lista;
    }

    // Metodo que cierra los brokers en uso
    private void closeBrokers() {
        broker.close();
    }    
}

