//   Generated by FlechaRoja Tech Tools (2003) 

package com.unify.webcenter.broker;

import com.unify.webcenter.data.*;

import org.apache.ojb.broker.query.*;
import org.apache.ojb.broker.*;
import java.util.*;

/**
* Class that represent the broker for the table predefined_messages
* @author Administrator
*/
public class predefined_messagesBroker extends MainBroker {

	public java.util.Iterator getList(int accountId) throws PersistenceBrokerException {
          // New criteria for sortering
        Criteria criteria = new Criteria();
        criteria.addEqualTo("id_account",new Integer(accountId));
		// Query of all the post
		Query query = new QueryByCriteria(predefined_messagesData.class, criteria);

		// ask the broker to retrieve the Extent collection
		Collection allLines = broker.getCollectionByQuery(query);

		// now iterate over the result to print each Service
		return allLines.iterator();
	}
        
           public java.util.Iterator getList(String sortColumnName, String sortOrder) throws PersistenceBrokerException {
        // New criteria for sortering
        Criteria criteria = new Criteria();

        // We order the result set
        if (sortOrder.equalsIgnoreCase("ASC")) {
            criteria.addOrderByAscending(sortColumnName);
        } else {
            criteria.addOrderByDescending(sortColumnName);
        }

        // Query of all the assignments
        Query query = new QueryByCriteria(predefined_messagesData.class, criteria);

        // ask the broker to retrieve the Extent collection
        Collection allLines = broker.getCollectionByQuery(query);

        // now iterate over the result 
        return allLines.iterator();
    }


	public java.util.Iterator getList(String sortColumnName, String sortOrder, int accountId) throws PersistenceBrokerException {
		// New criteria for sortering
		Criteria criteria = new Criteria();

		// We order the result set
		if (sortOrder.equalsIgnoreCase("ASC"))
			criteria.addOrderByAscending(sortColumnName);
		else
			criteria.addOrderByDescending(sortColumnName);
  criteria.addEqualTo("id_account",new Integer(accountId));
		// Query of all the post
		Query query = new QueryByCriteria(predefined_messagesData.class, criteria);

		// ask the broker to retrieve the Extent collection
		Collection allLines = broker.getCollectionByQuery(query);

		// now iterate over the result 
		return allLines.iterator();
	}
        
     
	// Return the object associated with the key.
	public com.unify.webcenter.data.mainData getData(int id, int idAccount) {
		predefined_messagesData data = new predefined_messagesData();
		Criteria criteria = new Criteria();
		criteria.addEqualTo("id", new Integer(id));
 criteria.addEqualTo("id_account", Integer.valueOf("" + idAccount));
		// Query of the exact organization
		Query query = new QueryByCriteria(predefined_messagesData.class, criteria);

		// ask the broker to retrieve the Extent collection
		Collection allLines = broker.getCollectionByQuery(query);
		Iterator e = allLines.iterator();
		// If exists the record -MUST EXISTS ALWAYS
		if (e.hasNext())
			data = (predefined_messagesData) e.next();

		// We return the object
		return data;
	}

  public com.unify.webcenter.data.mainData getData(int id) {
        predefined_messagesData data = new predefined_messagesData();
        Criteria criteria = new Criteria();
        criteria.addEqualTo("id", new Integer(id));

        // Query of the exact organization
        Query query = new QueryByCriteria(predefined_messagesData.class, criteria);

        // ask the broker to retrieve the Extent collection
        Collection allLines = broker.getCollectionByQuery(query);
        Iterator e = allLines.iterator();
        // If exists the record -MUST EXISTS ALWAYS

        if (e.hasNext()) {
            data = (predefined_messagesData) e.next();
        }

        // We return the object
        return data;
    }    

 }