//   Generated by FlechaRoja Tech Tools (2003) 
package com.unify.webcenter.broker;

import com.unify.webcenter.data.*;
import java.sql.Timestamp;
import org.apache.ojb.broker.query.*;
import org.apache.ojb.broker.*;
import java.util.*;


/**
* Class that represent the broker for the table post
* @author Administrator
*/

public class postBroker  extends MainBroker {

	public java.util.Iterator getList(int accountId) throws PersistenceBrokerException {
          // New criteria for sortering
        Criteria criteria = new Criteria();
        criteria.addEqualTo("id_account",new Integer(accountId));
		// Query of all the post
		Query query = new QueryByCriteria(postData.class, criteria);

		// ask the broker to retrieve the Extent collection
		Collection allLines = broker.getCollectionByQuery(query);

		// now iterate over the result to print each Service
		return allLines.iterator();
	}

   public java.util.Iterator getList(String sortColumnName, String sortOrder) throws PersistenceBrokerException {
        // New criteria for sortering
        Criteria criteria = new Criteria();

        // We order the result set
        if (sortOrder.equalsIgnoreCase("ASC")) {
            criteria.addOrderByAscending(sortColumnName);
        } else {
            criteria.addOrderByDescending(sortColumnName);
        }

        // Query of all the assignments
        Query query = new QueryByCriteria(postData.class, criteria);

        // ask the broker to retrieve the Extent collection
        Collection allLines = broker.getCollectionByQuery(query);

        // now iterate over the result 
        return allLines.iterator();
    }


	public java.util.Iterator getList(String sortColumnName, String sortOrder, int accountId) throws PersistenceBrokerException {
		// New criteria for sortering
		Criteria criteria = new Criteria();

		// We order the result set
		if (sortOrder.equalsIgnoreCase("ASC"))
			criteria.addOrderByAscending(sortColumnName);
		else
			criteria.addOrderByDescending(sortColumnName);
  criteria.addEqualTo("id_account",new Integer(accountId));
		// Query of all the post
		Query query = new QueryByCriteria(postData.class, criteria);

		// ask the broker to retrieve the Extent collection
		Collection allLines = broker.getCollectionByQuery(query);

		// now iterate over the result 
		return allLines.iterator();

	}


	// Return the object associated with the key.

	public mainData getData(int id, int idAccount) {
		postData data = new postData();
		Criteria criteria = new Criteria();
		criteria.addEqualTo("id", new Integer(id));
 criteria.addEqualTo("id_account", Integer.valueOf("" + idAccount));
		// Query of the exact organization
		Query query = new QueryByCriteria(postData.class, criteria);

		// ask the broker to retrieve the Extent collection
		Collection allLines = broker.getCollectionByQuery(query);
		Iterator e = allLines.iterator();

		// If exists the record -MUST EXISTS ALWAYS
		if (e.hasNext())
			data = (postData) e.next();

		// We return the object
		return data;

	}

  public com.unify.webcenter.data.mainData getData(int id) {
        postData data = new postData();
        Criteria criteria = new Criteria();
        criteria.addEqualTo("id", new Integer(id));

        // Query of the exact organization
        Query query = new QueryByCriteria(postData.class, criteria);

        // ask the broker to retrieve the Extent collection
        Collection allLines = broker.getCollectionByQuery(query);
        Iterator e = allLines.iterator();
        // If exists the record -MUST EXISTS ALWAYS

        if (e.hasNext()) {
            data = (postData) e.next();
        }

        // We return the object
        return data;
    }    

   /*
    * Metodo que transfiere todos los post del usuario dado al dueo del topic
    * al que pertenece.
   */

    public void transferAllReferences(int memberId, int idAccount) throws PersistenceBrokerException {
        // New criteria for search
        Criteria criteria = new Criteria();


        // Se agrega el criteria por proyecto.
        criteria.addEqualTo("member", Integer.valueOf("" + memberId));
 criteria.addEqualTo("id_account", Integer.valueOf("" + idAccount));
        // Query of all the teams
        Query query = new QueryByCriteria(postData.class, criteria);

        // ask the broker to retrieve the Extent collection
        Collection allLines = broker.getCollectionByQuery(query);            

        Iterator e = allLines.iterator();
        // Se actualiza cada entrada y se reapunta al duenno del proyecto.
        postData data;
        topicsData topicData;
        topicsBroker topicBroker = new topicsBroker();
        while (e.hasNext()) {
            data = (postData) e.next();            
            topicData = (topicsData) topicBroker.getData(data.gettopic(), idAccount);
            data.setmember(topicData.getowner()); 
            this.update(data);

        }

        topicBroker.close();

    }                  

   /*
    * Metodo que borra todos los post del usuario dado al dueo del topic
    * al que pertenece.
    */

    public void deleteAllReferences(int memberId, int idAccount) throws PersistenceBrokerException {

        // New criteria for search
        Criteria criteria = new Criteria();

        // Se agrega el criteria por proyecto.
        criteria.addEqualTo("member", Integer.valueOf("" + memberId));
 criteria.addEqualTo("id_account", Integer.valueOf("" + idAccount));
        // Query of all the teams
        Query query = new QueryByCriteria(postData.class, criteria);

        // ask the broker to retrieve the Extent collection
        Collection allLines = broker.getCollectionByQuery(query);            

        Iterator e = allLines.iterator();

        // Se borran cada entrada y se reapunta al duenno del proyecto.
        while (e.hasNext()) {
            this.delete(e.next());            
        }

    }                  

    
     public void deleteAllReferencesbyAccount(int accountId) throws PersistenceBrokerException {

        // New criteria for search
        Criteria criteria = new Criteria();

        // Se agrega el criteria por proyecto.
        criteria.addEqualTo("id_account", Integer.valueOf("" + accountId));

        // Query of all the teams
        Query query = new QueryByCriteria(postData.class, criteria);

        // ask the broker to retrieve the Extent collection
        Collection allLines = broker.getCollectionByQuery(query);            

        Iterator e = allLines.iterator();

        // Se borran cada entrada y se reapunta al duenno del proyecto.
        while (e.hasNext()) {
            this.delete(e.next());            
        }

    }                  


    /**
     * Metodo que regresa la lista de post de un topic determinado
     */
    public java.util.ArrayList getListByTopic(String sortColumnName, String sortOrder, int topic, String timeZone, int idAccount) throws PersistenceBrokerException {
		// New criteria for sortering
		Criteria criteria = new Criteria();
                System.out.println("POST1");
                criteria.addEqualTo("topic", new Integer(topic));
 criteria.addEqualTo("id_account", Integer.valueOf("" + idAccount));

		// Query of all the post
		QueryByCriteria query = new QueryByCriteria(postData.class, criteria);
                System.out.println("POST2");
                
		// We order the result set
		if (sortOrder.equalsIgnoreCase("ASC"))
			query.addOrderByAscending(sortColumnName);
		else
			query.addOrderByDescending(sortColumnName);                

                System.out.println("POST3");
		// ask the broker to retrieve the Extent collection
		Collection allLines = broker.getCollectionByQuery(query);
                ArrayList result = new ArrayList(allLines);
                ArrayList array = new ArrayList();                
                postData _postData = new postData();
                System.out.println("POST4");
                System.out.println("POST5 " + result.size());
                for(int i=0;i<result.size();i++){
                    _postData = new postData();                    
                    _postData = (postData)result.get(i);
                    _postData.setcreated(Timestamp.valueOf(_postData.convTimeZone(_postData.getcreated(), timeZone)));
                    
                    array.add(_postData);
                }
                System.out.println("POST5");
                // now iterate over the result     
		return array;

	}

        /**
     * Metodo que regresa la lista de post de un topic determinado, por miembro
     */
    public java.util.ArrayList getListByTopicMember(String sortColumnName, String sortOrder, int topic, String timeZone, int idAccount, int memberId) throws PersistenceBrokerException {
		// New criteria for sortering
		Criteria criteria = new Criteria();
                criteria.addEqualTo("topic", new Integer(topic));
                criteria.addEqualTo("id_account", Integer.valueOf("" + idAccount));

                criteria.addEqualTo("member", new Integer(memberId));
 
		// Query of all the post
		QueryByCriteria query = new QueryByCriteria(postData.class, criteria);
                
		// We order the result set
		if (sortOrder.equalsIgnoreCase("ASC"))
			query.addOrderByAscending(sortColumnName);
		else
			query.addOrderByDescending(sortColumnName);                

		// ask the broker to retrieve the Extent collection
		Collection allLines = broker.getCollectionByQuery(query);
                ArrayList result = new ArrayList(allLines);
                ArrayList array = new ArrayList();                
                postData _postData = new postData();
                for(int i=0;i<result.size();i++){
                    _postData = new postData();                    
                    _postData = (postData)result.get(i);
                    _postData.setcreated(Timestamp.valueOf(_postData.convTimeZone(_postData.getcreated(), timeZone)));
                    
                    array.add(_postData);
                }
                // now iterate over the result     
		return array;

	}
 }