//   Generated by FlechaRoja Tech Tools (2003) 

package com.unify.webcenter.broker;

import com.unify.webcenter.data.*;

import org.apache.ojb.broker.query.*;
import org.apache.ojb.broker.*;
import java.util.*;

/**
* Class that represent the broker for the table organizations
* @author Administrator
*/
public class organizationsBroker  extends MainBroker {

	public java.util.Iterator getList(int accountId) throws PersistenceBrokerException {
          // New criteria for sortering
        Criteria criteria = new Criteria();
        criteria.addEqualTo("id_account",new Integer(accountId));
            // Query of all the organizations
            Query query = new QueryByCriteria(organizationsData.class, criteria);

            // ask the broker to retrieve the Extent collection
            Collection allLines = broker.getCollectionByQuery(query);

            // now iterate over the result to print each Service
            return allLines.iterator();
	}
        
        public java.util.Iterator getList(String sortColumnName, String sortOrder) throws PersistenceBrokerException {
        // New criteria for sortering
        Criteria criteria = new Criteria();

        // We order the result set
        if (sortOrder.equalsIgnoreCase("ASC")) {
            criteria.addOrderByAscending(sortColumnName);
        } else {
            criteria.addOrderByDescending(sortColumnName);
        }

        // Query of all the assignments
        Query query = new QueryByCriteria(organizationsData.class, criteria);

        // ask the broker to retrieve the Extent collection
        Collection allLines = broker.getCollectionByQuery(query);

        // now iterate over the result 
        return allLines.iterator();
    }

           
	public java.util.Iterator getList(String sortColumnName, String sortOrder, int accountId) throws PersistenceBrokerException {
            // New criteria for sortering
            Criteria criteria = new Criteria();
            
            // We order the result set
            if (sortOrder.equalsIgnoreCase("ASC"))
                criteria.addOrderByAscending(sortColumnName);
            else
                criteria.addOrderByDescending(sortColumnName);
            
             criteria.addEqualTo("id_account",new Integer(accountId));
            // Query of all the organizations
            Query query = new QueryByCriteria(organizationsData.class, criteria);

            // ask the broker to retrieve the Extent collection
            Collection allLines = broker.getCollectionByQuery(query);

            // now iterate over the result to print each Service
            return allLines.iterator();
	}    
        

        // Return the object associated with the key.
        public mainData getData(int id, int idAccount) {
            organizationsData data = new organizationsData();
            
            Criteria criteria = new Criteria();
            criteria.addEqualTo("id", new Integer(id)); 
             criteria.addEqualTo("id_account", Integer.valueOf("" + idAccount));
            // Query of the exact organization
            Query query = new QueryByCriteria(organizationsData.class, criteria);

            // ask the broker to retrieve the Extent collection
            Collection allLines = broker.getCollectionByQuery(query);

            Iterator e = allLines.iterator();            
            
            // If exists the record -MUST EXISTS ALWAYS
            if (e.hasNext()) 
                data = (organizationsData) e.next();
            
            // We return the object
            return data;
        }
       
          public com.unify.webcenter.data.mainData getData(int id) {
        organizationsData data = new organizationsData();
        Criteria criteria = new Criteria();
        criteria.addEqualTo("id", new Integer(id));

        // Query of the exact organization
        Query query = new QueryByCriteria(organizationsData.class, criteria);

        // ask the broker to retrieve the Extent collection
        Collection allLines = broker.getCollectionByQuery(query);
        Iterator e = allLines.iterator();
        // If exists the record -MUST EXISTS ALWAYS

        if (e.hasNext()) {
            data = (organizationsData) e.next();
        }

        // We return the object
        return data;
    }    
     /*
     * Metodo que elimina todos los hijos de una organizacion dada.
     */

    public void deleteAllReferences(int id, int idAccount) throws Exception {

        // New criteria for search
        Criteria criteria = new Criteria();

        // Se agrega el criteria por id.
        criteria.addEqualTo("id", Integer.valueOf("" + id));
 criteria.addEqualTo("id_account", Integer.valueOf("" + idAccount));
        // Query of all the teams
        Query query = new QueryByCriteria(organizationsData.class, criteria);

        // ask the broker to retrieve the Extent collection
        Collection allLines = broker.getCollectionByQuery(query);            

        Iterator e = allLines.iterator();

        // Se abren los brokers necesarios.
        projectsBroker projBroker = new projectsBroker();
        membersBroker memBroker = new membersBroker();

        organizationsData dataDel;
        
        // Borra cada entrada
        while (e.hasNext()) {
            dataDel = (organizationsData) e.next();
            
            // Se borran los proyectos de esta organizacion
            projBroker.deleteAllReferencesByOrganization(dataDel.getid(),idAccount);
            memBroker.deleteAllReferencesByOrganization(dataDel.getid(),idAccount);
            
            // Se borra la organizacion
            this.delete(dataDel);
        }
        // Se cierran los brokers.
        projBroker.close();
        memBroker.close();
    
        
    }       
    
      /*
     * Metodo que elimina todos los hijos de una organizacion dada.
     */

    public void deleteAllReferencesbyAccount(int id)  throws PersistenceBrokerException {

           // New criteria for search
        Criteria criteria = new Criteria();

        // Se agrega el criteria por proyecto.
        criteria.addEqualTo("id_Account",new Integer(id));

        // Query of all the teams
        Query query = new QueryByCriteria(organizationsData.class, criteria);

        // ask the broker to retrieve the Extent collection
        Collection allLines = broker.getCollectionByQuery(query);            

        Iterator e = allLines.iterator();

        // Se borran cada entrada y se reapunta al duenno del proyecto.
        while (e.hasNext()) {
            this.delete(e.next());            
        }
    
        
    }               
 }